%% SYSTLC: MbedTarget (Embedded Target for Simulink Coder) TMF: mbed_grt.tmf MAKE: make_rtw \
%%   EXTMODE: ext_comm


%%  MbedTarget Simulink target
%%  Copyright 2013-2014 The MathWorks, Inc.
%%  Copyright (c) 2014-2017 Dr.O.Hagendorf , HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.


%selectfile NULL_FILE

%assign CodeFormat = "Embedded-C"
%assign TargetType = "RT"
%assign Language   = "C"
%assign MbedTarget = "mbed_grt"
%assign MatFileLogging = 0


%% The model_SetEventsForThisBaseRate function is not required for the
%% VxWorks environment, i.e., when using an operating system.
%assign InlineSetEventsForThisBaseRateFcn  = TLC_TRUE
%assign SuppressMultiTaskScheduler = TLC_TRUE
%assign UseRTOS = TLC_FALSE
%assign MbedVersion = 'mbed-os 5'
%include "codegenentry.tlc"
%include "mbed_grt_genfiles.tlc"

%% The contents between 'BEGIN_RTW_OPTIONS' and 'END_RTW_OPTIONS' in this file
%% are used to maintain backward compatibility to R13 and preR13 custom target
%% file only.  If you want to use this file as a template to develop your
%% own system target file, you need to remove the 'CONFIGSET_TARGET_COMPONENT'
%% section at the end of this file.
%%

/%
  BEGIN_RTW_OPTIONS

  oIdx = 1;

  rtwoptions(oIdx).prompt        = 'Mbed options';
  rtwoptions(oIdx).type          = 'Category';
  rtwoptions(oIdx).enable        = 'on';
  rtwoptions(oIdx).default       = 11;  % number of items under this category excluding this one.
  rtwoptions(oIdx).popupstrings  = '';
  rtwoptions(oIdx).tlcvariable   = '';
  rtwoptions(oIdx).tooltip       = '';
  rtwoptions(oIdx).callback      = '';
  rtwoptions(oIdx).closecallback = '';
  rtwoptions(oIdx).makevariable  = '';

  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'mbed os 5 Target: ';
  rtwoptions(oIdx).type           = 'Popup';
  rtwoptions(oIdx).popupstrings   = mbed_getTargets();
  rtwoptions(oIdx).tlcvariable    = 'MbedTarget5';
  rtwoptions(oIdx).makevariable   = 'MBEDTARGET5';
  rtwoptions(oIdx).enable         = 'on';
  rtwoptions(oIdx).tooltip        = sprintf(['mbed target e.g. DISCO_F407VG1']);
  rtwoptions(oIdx).callback       = 'mbed_tlc_callback(hDlg, hSrc, ''MbedTarget5'')';

  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'MbedOS additional project config: ';
  rtwoptions(oIdx).type           = 'Popup';
  rtwoptions(oIdx).popupstrings   = mbed_getAppConfigs();
  rtwoptions(oIdx).tlcvariable    = 'MbedAppConfig';
  rtwoptions(oIdx).enable         = 'on';
  rtwoptions(oIdx).tooltip        = sprintf(['mbed target e.g. DISCO_F407VG1']);
  rtwoptions(oIdx).callback       = 'mbed_tlc_callback(hDlg, hSrc, ''MbedAppConfig'')';

  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'Create additional IDE project: ';
  rtwoptions(oIdx).type           = 'Popup';
  rtwoptions(oIdx).popupstrings   = mbed_getIDEs(true);
  rtwoptions(oIdx).tlcvariable    = 'MbedAddProjectFiles';
  rtwoptions(oIdx).enable         = 'on';
  rtwoptions(oIdx).tooltip        = sprintf(['e.g. uvision for µVision project files']);
  rtwoptions(oIdx).callback       = 'mbed_tlc_callback(hDlg, hSrc, ''MbedCreateIDEProject'')';

  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'detect mbed target (mbedls)';
  rtwoptions(oIdx).type           = 'Pushbutton';
  rtwoptions(oIdx).default        = '';
  rtwoptions(oIdx).tlcvariable    = '';
  rtwoptions(oIdx).makevariable   = '';
  rtwoptions(oIdx).enable         = '';
  rtwoptions(oIdx).tooltip        = sprintf(['']);
  rtwoptions(oIdx).callback       = 'mbed_tlc_callback(hDlg, hSrc, ''mbedls'')';

  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'use mbedls autodetect';
  rtwoptions(oIdx).type           = 'Checkbox';
  rtwoptions(oIdx).default        = mbed.Prefs.getMbedAutoDetect();
  rtwoptions(oIdx).tlcvariable    = 'MbedlsAutodetect';
  rtwoptions(oIdx).makevariable   = '';
  rtwoptions(oIdx).tooltip        = ['use mbedls to detect mbed Virtual Drive and Virtual COM Port before flashing'];
  rtwoptions(oIdx).callback       = 'mbed_tlc_callback(hDlg, hSrc, ''MbedlsAutodetect'')';

  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'Flash Application';
  rtwoptions(oIdx).type           = 'Checkbox';
  rtwoptions(oIdx).default        = mbed.Prefs.getMbedDownload();
  rtwoptions(oIdx).tlcvariable    = 'DownloadApplication';
  rtwoptions(oIdx).makevariable   = 'DOWNLOADAPPLICATION';
  rtwoptions(oIdx).tooltip        = ['Flash application: copy to Virtual Drive'];
  rtwoptions(oIdx).callback       = 'mbed_tlc_callback(hDlg, hSrc, ''DownloadApplication'')';

  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'Flash method: ';
  rtwoptions(oIdx).type           = 'Popup';
  rtwoptions(oIdx).popupstrings   = mbed_getDownloadMethod();
  rtwoptions(oIdx).tlcvariable    = 'DownloadMethod';
  rtwoptions(oIdx).makevariable   = 'DownloadMethod';
  rtwoptions(oIdx).enable         = 'on';
  rtwoptions(oIdx).tooltip        = sprintf(['Downloadfunktion: mbed - copy to mbed Virtual Drive, STLink - batch file calling STLink CLI']);
  rtwoptions(oIdx).callback       = 'mbed_tlc_callback(hDlg, hSrc, ''DownloadMethod'')';

  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'mbed Virtual Drive: ';
  rtwoptions(oIdx).type           = 'Edit';
  rtwoptions(oIdx).default        = mbed.Prefs.getMbedDrive();
  rtwoptions(oIdx).tlcvariable    = 'MbedDrive';
  rtwoptions(oIdx).makevariable   = 'MBEDDRIVE';
  rtwoptions(oIdx).enable         = 'on';
  rtwoptions(oIdx).tooltip        = sprintf(['Virtual USB Drive (E:)']);
  rtwoptions(oIdx).callback       = 'mbed_tlc_callback(hDlg, hSrc, ''MbedDrive'')';

  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'mbed Virtual COM Port: ';
  rtwoptions(oIdx).type           = 'Edit';
  rtwoptions(oIdx).default        = mbed.Prefs.getComPort();
  rtwoptions(oIdx).tlcvariable    = 'ComPort';
  rtwoptions(oIdx).makevariable   = 'COMPORT';
  rtwoptions(oIdx).enable         = 'on';
  rtwoptions(oIdx).tooltip        = sprintf(['Virtual COM Port (COMx)']);
  rtwoptions(oIdx).callback       = 'mbed_tlc_callback(hDlg, hSrc, ''ComPort'')';

  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'Use mbed RTOS';
  rtwoptions(oIdx).type           = 'Checkbox';
  rtwoptions(oIdx).default        = 1;
  rtwoptions(oIdx).tlcvariable    = 'UseMbedRTOS';
  rtwoptions(oIdx).makevariable   = 'USEMBEDRTOS';
  rtwoptions(oIdx).enable         = 'off';
  rtwoptions(oIdx).tooltip        = sprintf(['Add mbed RTOS.']);
  rtwoptions(oIdx).callback       = 'mbed_tlc_callback(hDlg, hSrc, ''UseMbedRTOS'')';

  oIdx = oIdx + 1;


  %------------------------------------%
  % Configure code generation settings %
  %------------------------------------%

  rtwgensettings.BuildDirSuffix = '_slprj';
  rtwgensettings.Version = '1';
  rtwgensettings.DerivedFrom = 'grt.tlc';
  rtwgensettings.SelectCallback = 'mbed_grt_select_callback_handler(hDlg, hSrc)';

  END_RTW_OPTIONS

%/

%% %selectfile STDOUT
%% %matlab disp(MbedTarget)
