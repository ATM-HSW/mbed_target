%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Abstract:
%%   Custom file processing to generate a "main" file.
%%
%% Copyright 1994-2014 The MathWorks, Inc.
%%           2014 Dr. Olaf Hagendorf, HS Wismar
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%selectfile NULL_FILE

%function FcnSingleTaskingMain() void

  %if GenerateSampleERTMain
    %assign CompiledModel.GenerateSampleERTMain = TLC_FALSE
  %endif

  %if LibIsModelReferenceTarget()
    %return
  %endif

  %assign cFile = LibCreateSourceFile("Source", "Custom", "ert_main")

  %openfile tmpBuf
  #include "%<LibGetMdlPubHdrBaseName()>.h"
  #include "mbed.h"

  %if UseMbedRTOS
  #include "rtos.h"
  %endif

  %closefile tmpBuf

  %<LibSetSourceFileSection(cFile, "Includes", tmpBuf)>

  %openfile tmpBuf

  %% Get fundamental step time
  %assign SAMPLETIME = CompiledModel.FundamentalStepSize
  %if SAMPLETIME < 0.00005
      %% Even 50 microseconds is too quick for Arduino
      %<LibReportError("The minimum supported sample time is 50 microseconds. Change the Sample time parameter in blocks that use incorrect sample times.")>
  %endif
  %assign SampleRate_us  = %<SAMPLETIME> * 1000000
  %assign SampleRate_ms  = %<SAMPLETIME> * 1000
  
  #define STEP_SIZE_US %<SampleRate_us>F /* Sample Time in microseconds */
  #define STEP_SIZE_MS %<SampleRate_ms>F /* and in milliseconds */

  %if UseMbedRTOS
    osThreadId step_id;
  %else
    Ticker timer;
  %endif
  %closefile tmpBuf

  %<LibSetSourceFileSection(cFile, "Declarations", tmpBuf)>

  %if UseMbedRTOS
  
    %openfile declbuf	
    void step_thread(void const *param) {
	  step_id = Thread::gettid();
	  while(1){
	    Thread::signal_wait(0x1,osWaitForever);
        %<LibCallModelStep(0)>
	  }
    } 
	
	void step_callback(void const *param){
	  osSignalSet(step_id, 0x1);
	}
	%closefile declbuf
    %<LibAddSourceFileCustomSection(cFile,"Declarations","Ert_main_fcn_decl")>
    %<LibSetSourceFileCustomSection(cFile,"Ert_main_fcn_decl",declbuf)>
	
    %openfile tmpBuf
	
    %<LibAddSourceFileCustomSection(cFile,"Declarations","Ert_main_glob_decl")>
    %<LibGetSourceFileCustomSection(cFile,"Ert_main_glob_decl")>
	   
  
    %<LibAddSourceFileCustomSection(cFile,"Declarations","Ert_main_fcn_decl")>
    %<LibGetSourceFileCustomSection(cFile,"Ert_main_fcn_decl")>
	
    /* with RTOS */
    int main(void) {
      
      Thread step_1_thread(step_thread, NULL, osPriorityNormal, DEFAULT_STACK_SIZE);
      RtosTimer step_1_timer(step_callback, osTimerPeriodic, (void *)0);
      %<LibAddSourceFileCustomSection(cFile,"Declarations","Ert_main_loc_decl")>
      %<LibGetSourceFileCustomSection(cFile,"Ert_main_loc_decl")>
  
      /* initialize model */
      %<LibCallModelInitialize()>\
  
      %<LibAddSourceFileCustomSection(cFile,"Declarations","Ert_main_after_init")>
      %<LibGetSourceFileCustomSection(cFile,"Ert_main_after_init")>

      %if ExtMode
          %<SLibGenERTExtModeInit()>
      %endif
  
  
      /* start Timer for main step function */
      step_1_timer.start(STEP_SIZE_MS);
  
      /* main task waits forever */
      Thread::wait(osWaitForever);
  
      /* deinitialize model */
      %<LibCallModelTerminate()>\
  	
  	return 0;
    }
    %closefile tmpBuf

  %else

    %openfile tmpBuf   
  
    // without RTOS
    int main(void)
    {      
      /* initialize model */
      %<LibCallModelInitialize()>\
  
      %if ExtMode
          %<SLibGenERTExtModeInit()>
      %endif
  
      timer.attach_us(&%<LibGetModelName()>_step, STEP_SIZE_US);
      while (true);
  
      /* deinitialize model */
      %<LibCallModelTerminate()>\
  	
  	return 0;
    }
    %closefile tmpBuf
  
  %endif
  
  %<LibSetSourceFileSection(cFile, "Functions", tmpBuf)>

%endfunction
