%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Abstract:
%%   Custom file processing to generate a "main" file.
%%
%% Copyright 1994-2014 The MathWorks, Inc.
%%           2014-2017 Dr. Olaf Hagendorf, HS Wismar
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%selectfile NULL_FILE

%function FcnSingleTaskingMain() void

  %if GenerateSampleERTMain
    %assign CompiledModel.GenerateSampleERTMain = TLC_FALSE
  %endif

  %if LibIsModelReferenceTarget()
    %return
  %endif

  %assign cFile = LibCreateSourceFile("Source", "Custom", "ert_main")

  %openfile tmpBuf
  #include "%<LibGetMdlPubHdrBaseName()>.h"
  #include "mbed.h"

  %if UseMbedRTOS
  #include "rtos.h"
  %endif

  %closefile tmpBuf

  %<LibSetSourceFileSection(cFile, "Includes", tmpBuf)>

  %openfile tmpBuf

  %% Get fundamental step time
  %assign SAMPLETIME = CompiledModel.FundamentalStepSize
  %if SAMPLETIME < 0.000001
      %% Because micro second ticker function are used, this is the shortest periode, nevertheless the target supports it.
      %<LibReportError("The minimum supported sample time is 1 microseconds. Change the Step size parameter under Solver in the model Configuration Parameters dialog.")>
  %endif
  %if SAMPLETIME < 0.0001
      %<LibReportWarning("Please check if the target can support this step size, e.g. NUCLEO_F767ZI supports 1µs without RTOS. But it needs 10µs with RTOS. A NUCLEO_F411RE needs 10µs or more without RTOS.")>
  %endif
  %assign SampleRate_us  = %<SAMPLETIME> * 1000000
  %assign SampleRate_ms  = %<SAMPLETIME> * 1000

  #define STEP_SIZE_US %<SampleRate_us>F /* Sample Time in microseconds */
  #define STEP_SIZE_MS %<SampleRate_ms>F /* and in milliseconds */

  %if UseMbedRTOS
    osThreadId step_id=NULL;
    Thread step_1_thread;
    Ticker step_1_ticker;
  %else
    Ticker timer;
  %endif
  %closefile tmpBuf

  %<LibSetSourceFileSection(cFile, "Declarations", tmpBuf)>

  %if UseMbedRTOS

    %openfile declbuf
    void step_thread() {
      step_id = Thread::gettid();
      while(1){
        Thread::signal_wait(0x1,osWaitForever);
        %<LibCallModelStep(0)>
      }
    }

    void step_callback(){
      if(step_id!=NULL)
        osSignalSet(step_id, 0x1);
    }
    %closefile declbuf

    %<LibAddSourceFileCustomSection(cFile,"Declarations","Ert_main_fcn_decl")>
    %<LibSetSourceFileCustomSection(cFile,"Ert_main_fcn_decl",declbuf)>

    %openfile tmpBuf
    %<LibAddSourceFileCustomSection(cFile,"Declarations","Ert_main_glob_decl")>
    %<LibGetSourceFileCustomSection(cFile,"Ert_main_glob_decl")>

    %<LibAddSourceFileCustomSection(cFile,"Declarations","Ert_main_fcn_decl")>
    %<LibGetSourceFileCustomSection(cFile,"Ert_main_fcn_decl")>

    /* with RTOS */
    int main(void) {
      /* initialize model */
      %<LibCallModelInitialize()>\

      step_1_ticker.attach_us(callback(step_callback), (timestamp_t)STEP_SIZE_US);
      step_1_thread.start(callback(step_thread));
      %<LibAddSourceFileCustomSection(cFile,"Declarations","Ert_main_loc_decl")>
      %<LibGetSourceFileCustomSection(cFile,"Ert_main_loc_decl")>

      %<LibAddSourceFileCustomSection(cFile,"Declarations","Ert_main_after_init")>
      %<LibGetSourceFileCustomSection(cFile,"Ert_main_after_init")>

      %if ExtMode
          %<SLibGenERTExtModeInit()>
      %endif

      /* main task waits forever */
      Thread::wait(osWaitForever);

      /* deinitialize model */
      %<LibCallModelTerminate()>\

      return 0;
    }
    %closefile tmpBuf

  %else

    %openfile tmpBuf

    // without RTOS
    int main(void)
    {
      /* initialize model */
      %<LibCallModelInitialize()>\

      %if ExtMode
          %<SLibGenERTExtModeInit()>
      %endif

      timer.attach_us(&%<LibGetModelName()>_step, STEP_SIZE_US);
      while (true);

      /* deinitialize model */
      %<LibCallModelTerminate()>\

      return 0;
    }
    %closefile tmpBuf

  %endif

  %<LibSetSourceFileSection(cFile, "Functions", tmpBuf)>

%endfunction
