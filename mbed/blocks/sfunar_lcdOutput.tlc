%% File : sfunar_lcdOutput.tlc
%%
%% Description: 
%%   Code generation file for sfunar_lcdOutput
%%

%% Copyright 2010 The MathWorks, Inc.


%implements sfunar_lcdOutput "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction


%% Function: Start ========================================================
%%
%function Start(block, system) Output
  %%
  %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
  LCD_setup();
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
  %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
  %%
  LCD_out( %<u1_ptr>);
  %%
%endfunction


%assign cFile = LibCreateSourceFile("Source", "Custom", "LCD_control")
  
  %openfile tmpBuf
  int DI = 12;
  int RW = 11;
  int DB[] = {3, 4, 5, 6, 7, 8, 9, 10};
  int Enable = 2;
  %closefile tmpBuf
  
  %<LibSetSourceFileSection(cFile, "Definitions", tmpBuf)>
  
  %openfile tmpBuf
  #include <string.h>
  #include <stdlib.h>
  #include "WProgram.h"
  %closefile tmpBuf
  
  %<LibSetSourceFileSection(cFile, "Includes", tmpBuf)>

 %openfile tmpBuf  

  void LcdCommandWrite(int value);
  void LcdDataWrite(int value);
  void LCD_setup(void);
  void LCD_out(int8_t *value);

  %closefile tmpBuf

  %<LibSetSourceFileSection(cFile, "Declarations", tmpBuf)>
  
  %openfile tmpBuf
  
void LcdCommandWrite(int value) {
 /* poll all the pins */
 int i = 0;
 for (i=DB[0]; i <= DI; i++) {
   digitalWrite(i,value & 01);
   value >>= 1;
 }
 digitalWrite(Enable,LOW);
 delayMicroseconds(1);
 /* send a pulse to enable */
 digitalWrite(Enable,HIGH);
 delayMicroseconds(1);  /* pause 1 ms according to datasheet */
 digitalWrite(Enable,LOW);
 delayMicroseconds(1);  /* pause 1 ms according to datasheet */
}

void LcdDataWrite(int value) {
 /* poll all the pins */
 int i = 0;
 digitalWrite(DI, HIGH);
 digitalWrite(RW, LOW);
 for (i=DB[0]; i <= DB[7]; i++) {
   digitalWrite(i,value & 01);
   value >>= 1;
 }
 digitalWrite(Enable,LOW);
 delayMicroseconds(1);
 /* send a pulse to enable */
 digitalWrite(Enable,HIGH);
 delayMicroseconds(1);
 digitalWrite(Enable,LOW);
 delayMicroseconds(1);  /* pause 1 ms according to datasheet */
}

void LCD_setup (void) {
 int i = 0;
 for (i=Enable; i <= DI; i++) {
   pinMode(i,OUTPUT);
 }
 delay(100);
 /* initiatize lcd after a short pause
  * needed by the LCDs controller
  */
 LcdCommandWrite(0x38);  /* function set:
                          * 8-bit interface, 1 display lines, 5x7 font
                          */
 delay(64);                      
 LcdCommandWrite(0x06);  /* entry mode set:
                          * increment automatically, no display shift
                          */
 delay(20);                      
 LcdCommandWrite(0x0C);  /* display control:
                          * turn display on, cursor on, no blinking
                          */
 delay(20);                      
 LcdCommandWrite(0x01);  /* clear display, set cursor position to zero  
                          */
 delay(100);                      
 LcdCommandWrite(0x80);  /* display control:
                          * turn display on, cursor on, no blinking
                          */
 delay(20);                      
}

void LCD_out(int8_t *value) {
  char buffer0[] = "The signal value is:";
  uint8_t i;

  LcdCommandWrite(0x02);  /* set cursor position to zero  */
  delay(10);

  for (i=0;i<strlen(buffer0);i++){
		LcdDataWrite(buffer0[i]);
  }
  
  for (i=0;i<strlen(value);i++){
		LcdDataWrite(value[i]);
  }

  delay(500);
}

  %closefile tmpBuf
  
  %<LibSetSourceFileSection(cFile, "Functions", tmpBuf)>



%assign hFile = LibCreateSourceFile("Header", "Custom", "LCD_control")

 %openfile tmpBuf  

  extern void LCD_setup(void);
  extern void LCD_out(int8_t *value);

  %closefile tmpBuf

  %<LibSetSourceFileSection(hFile, "Declarations", tmpBuf)>

%% [EOF]

