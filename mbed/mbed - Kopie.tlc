%% SYSTLC: Mbed Target (Embedded Target) TMF: mbed.tmf MAKE: make_rtw \
%%   EXTMODE: ext_comm

%selectfile NULL_FILE

%% Copyright 2013-2014 The MathWorks, Inc.
%%           2014 Dr. Olaf Hagendorf, HS Wismar
%%
%%
%%

%assign CodeFormat = "Embedded-C"
%assign TargetType = "RT"
%assign Language   = "C"


%% The model_SetEventsForThisBaseRate function is not required for the
%% VxWorks environment, i.e., when using an operating system.
%assign SuppressSetEventsForThisBaseRateFcn = (TargetOS == "VxWorksExample")
%assign InlineSetEventsForThisBaseRateFcn  = TLC_TRUE
%assign SuppressMultiTaskScheduler = TLC_TRUE
%assign UseRTOS = TLC_FALSE
%include "commontargetlib.tlc"
%include "codegenentry.tlc"

%% The contents between 'BEGIN_RTW_OPTIONS' and 'END_RTW_OPTIONS' in this file
%% are used to maintain backward compatibility to R13 and preR13 custom target
%% file only.  If you want to use this file as a template to develop your
%% own system target file, you need to remove the 'CONFIGSET_TARGET_COMPONENT'
%% section at the end of this file.
%%

/%
  BEGIN_RTW_OPTIONS

  oIdx = 1;

  rtwoptions(oIdx).prompt        = 'Mbed options';
  rtwoptions(oIdx).type          = 'Category';
  rtwoptions(oIdx).enable        = 'on';
  rtwoptions(oIdx).default       = 8;  % number of items under this category excluding this one.
  rtwoptions(oIdx).popupstrings  = '';
  rtwoptions(oIdx).tlcvariable   = '';
  rtwoptions(oIdx).tooltip       = '';
  rtwoptions(oIdx).callback      = '';
  rtwoptions(oIdx).opencallback  = '';
  rtwoptions(oIdx).closecallback = '';
  rtwoptions(oIdx).makevariable  = '';


  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'mbed Path: ';
  rtwoptions(oIdx).type           = 'Edit';
  rtwoptions(oIdx).default        = mbed.Prefs.getMbedPath();
  rtwoptions(oIdx).tlcvariable    = 'MbedPath';
  rtwoptions(oIdx).makevariable   = 'MBEDPATH';
  rtwoptions(oIdx).enable         = 'on';
  rtwoptions(oIdx).tooltip        = sprintf(['Path for mbed e.g. C:\\...\\mbed']);
  rtwoptions(oIdx).callback      = '';


  if false
  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'gcc Path: ';
  rtwoptions(oIdx).type           = 'Edit';
  rtwoptions(oIdx).default        = mbed.Prefs.getGccPath();
  rtwoptions(oIdx).tlcvariable    = 'GccPath';
  rtwoptions(oIdx).makevariable   = 'GCCPATH';
  rtwoptions(oIdx).enable         = 'on';
  rtwoptions(oIdx).tooltip        = sprintf(['Path for gcc compiler e.g. C:\\...\\GNU Tools ARM Embedded\\4.8 2014q3\\bin']);
  rtwoptions(oIdx).callback      = '';
  end


  if false
  oIdx = oIdx + 1;
  
  rtwoptions(oIdx).prompt         = 'Python Path: ';
  rtwoptions(oIdx).type           = 'Edit';
  rtwoptions(oIdx).default        = mbed.Prefs.getPythonPath();
  rtwoptions(oIdx).tlcvariable    = 'PythonPath';
  rtwoptions(oIdx).makevariable   = 'PYTHONPATH';
  rtwoptions(oIdx).enable         = 'on';
  rtwoptions(oIdx).tooltip        = sprintf(['Path for gcc compiler e.g. C:\\Python27']);
  rtwoptions(oIdx).callback      = '';
  end


  if false
  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'Delete Dest Path';
  rtwoptions(oIdx).type           = 'Checkbox';
  rtwoptions(oIdx).default        = 'on';
  rtwoptions(oIdx).tlcvariable    = 'DelDestPath';
  rtwoptions(oIdx).makevariable   = 'DELDESTPATH';
  rtwoptions(oIdx).tooltip        = sprintf(['Delete destination path: $(libmaple Directory)\\embeddedcoder']);
  rtwoptions(oIdx).callback       = '';
  end


  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'Build Application';
  rtwoptions(oIdx).type           = 'Checkbox';
  rtwoptions(oIdx).default        = 'on';
  rtwoptions(oIdx).tlcvariable    = 'BuildApplication';
  rtwoptions(oIdx).makevariable   = 'BUILDAPPLICATION';
  rtwoptions(oIdx).tooltip        = ['Compile and link application'];
  rtwoptions(oIdx).callback       = '';


  if false
  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'makefile Parallel Execution';
  rtwoptions(oIdx).type           = 'Checkbox';
  rtwoptions(oIdx).default        = 'off';
  rtwoptions(oIdx).tlcvariable    = 'ParallelExecution';
  rtwoptions(oIdx).makevariable   = '';
  rtwoptions(oIdx).callback       = '';
  rtwoptions(oIdx).tooltip        = sprintf(['Uses ''-j'' option for the makefile.']); 
  end


  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'Download Application';
  rtwoptions(oIdx).type           = 'Checkbox';
  rtwoptions(oIdx).default        = 'on';
  rtwoptions(oIdx).tlcvariable    = 'DownloadApplication';
  rtwoptions(oIdx).makevariable   = 'DOWNLOADAPPLICATION';
  rtwoptions(oIdx).tooltip        = ['Flash application'];
  rtwoptions(oIdx).callback      = '';


  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'mbed Virtual COM Port: ';
  rtwoptions(oIdx).type           = 'Edit';
  rtwoptions(oIdx).default        = mbed.Prefs.getComPort();
  rtwoptions(oIdx).tlcvariable    = 'ComPort';
  rtwoptions(oIdx).makevariable   = 'COMPORT';
  rtwoptions(oIdx).enable         = 'on';
  rtwoptions(oIdx).tooltip        = sprintf(['Virtual COM Port (COMx)']);
  rtwoptions(oIdx).callback      = '';


  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'mbed Virtual Drive: ';
  rtwoptions(oIdx).type           = 'Edit';
  rtwoptions(oIdx).default        = mbed.Prefs.getMbedDrive();
  rtwoptions(oIdx).tlcvariable    = 'MbedDrive';
  rtwoptions(oIdx).makevariable   = 'MBEDDRIVE';
  rtwoptions(oIdx).enable         = 'on';
  rtwoptions(oIdx).tooltip        = sprintf(['Virtual USB Drive (E:)']);
  rtwoptions(oIdx).callback      = '';


  if false  % deactivated for the moment
  oIdx = oIdx + 1;

  rtwoptions(oIdx).prompt         = 'Use RTOS';
  rtwoptions(oIdx).type           = 'Checkbox';
  rtwoptions(oIdx).default        = 'off';
  rtwoptions(oIdx).tlcvariable    = 'UseRTOS';
  rtwoptions(oIdx).makevariable   = 'USERTOS';
  rtwoptions(oIdx).callback       = '';
  rtwoptions(oIdx).tooltip        = sprintf(['Use RTOS operating system instead of bare board system.']);
  end


  %------------------------------------%
  % Configure code generation settings %
  %------------------------------------%

  rtwgensettings.BuildDirSuffix = '_mbed';
  rtwgensettings.Version = '1';
  rtwgensettings.DerivedFrom = 'ert.tlc';
  rtwgensettings.SelectCallback = 'mbed_select_callback_handler(hDlg, hSrc)';

  END_RTW_OPTIONS
 %/
 
