
.. include:: <isoamsa.txt>

VisualGDB
=========

Vorbereitung
------------

* VisualStudio 2005/2008/2010/2012/2013 oder 2015 downloaden (https://www.visualstudio.com/de-de/downloads/download-visual-studio-vs.aspx) und installieren. Die Community Version kann Problemlos verwendet werden. Expressversionen von VisualStudio werden NICHT unterstützt.
* VisualGDB unter http://visualgdb.com/download/ downloaden und der Installation folgen.

Durchführung
------------

Mbed Projekte mit VisualGDB importieren und debuggen. 

*	Visual Studio starten 
*	Neues Projekt erstellen
*	Auf der linken Seite VisualGDB auswählen |srarr| anschließend im mittlerem Bereich Embedded Project Wizard auswählen 
*	Beim Projektnamen sowie beim Pfad darf keine Leerzeichen verwendet werden.
*	Import a project built with command-line tools

	*	Generate a Makefile to build the project
	
		* 	Copy imported files to project directory
		*	Enable multi-threaded build
		
*	Controller auswählen

.. image:: ../images/choseController.png
 
* 	Fehlermeldung ignorieren
* 	Eigene Ordner auswählen und importieren |srarr| Import preserving directory structure 
* 	Auswahl des Debuggers

.. image:: ../images/choseDebugger.png

*  Mit *Finish* den Initialisierungsvorgang abschließen 

Projekteinstellungen
--------------------

*	Im Projekt mit Rechtsklick auf den Projektnamen dessen Einstellungen öffnen (VisualGDB Project Properties).
*	Unter Embedded Project können der gewählte Controller im Nachhinein noch verändert werden.

.. image:: ../images/embeddedProjektMenu.png
	:scale: 62 %
	
*	Die Checkboxen im Bereich Embedded Frameworks deaktivieren.

.. image:: ../images/embeddedFrameworks.png
	:scale: 62 %

*	Folgende Einstellungen müssen im Bereich Makefile settings geändert werden.
*	Die Preprocessor macros findet man im Pojektordner. Dort die \*.coproj mit einem Editor öffnen und die <Define name="__CORTEX_M4"/> kopieren, wobei nur der Name, welcher in den Kommas eingeschlossen ist benötigt wird.
*	Preprocessor macros: 

	* DEBUG 
	* TARGET_FF_ARDUINO 
	* TOOLCHAIN_GCC_ARM 
	* TARGET_NUCLEO_F411RE 
	* __CORTEX_M4 
	* MBED_BUILD_TIMESTAMP=1444121993.49 
	* TARGET_CORTEX_M 
	* __FPU_PRESENT=1 
	* __MBED__=1 
	* TARGET_M4 
	* TARGET_FF_MORPHO 
	* TARGET_STM 
	* TARGET_STM32F4 
	* TOOLCHAIN_GCC 
	* TARGET_STM32F411RE 
	* ARM_MATH_CM4
	
*	Im Bereich Include directories werden alle Ordner die Headerfiles beinhalten eingebunden.
*	Include directories:

	* mbed/api mbed/hal 
	* mbed/targets/cmsis 
	* mbed/targets/cmsis/TARGET_STM/TARGET_STM32F4 
	* mbed/targets/cmsis/TARGET_STM/TARGET_STM32F4/TARGET_NUCLEO_F411RE 
	* mbed/targets/hal/TARGET_STM/TARGET_STM32F4 
	* mbed/targets/hal/TARGET_STM/TARGET_STM32F4/TARGET_NUCLEO_F411RE
	
*	Linker script: mbed\\targets\\cmsis\\TARGET_STM\\TARGET_STM32F4\\TARGET_NUCLEO_F411RE\\TOOLCHAIN_GCC_ARM\\STM32F411XE.ld
 
.. image:: ../images/linkerScript.png
	:scale: 62%
 
*	Die Einstellungen können daraufhin bestätigt und geschlossen werden.
*	In der Ordnerstruktur können die Ordner env gelöscht werden (Header + Source files).
*	Die Datei startup_stm32f411xe.c muss unter Source files |srarr| Device-specific files gelöscht werden.
*	Die Datei startup_stm32f411xe.S muss hinzugefügt werden. Diese liegt unter Source files |srarr| mbed |srarr| targets |srarr| cmsis |srarr| TARGET_STM |srarr| TARGET_STM32F4 |srarr| TARGET_NUCLEO_F411RE = startup_stm32f411xe.S

