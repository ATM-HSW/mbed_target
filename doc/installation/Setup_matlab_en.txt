Matlab Setup
============

The mbed_target folder can be copied somewhere into the directory tree. But it is recommendable to use a path as close as possible to the root. The usage of document or desktop folder may not work in some cases. Windows has a restriction in the maximum command line length and the mbed_target build process could exceed this length in certain circumstances. As a second requirement the folder name \ *mbed_target*\  must not be changed and has to be unique in the folder hierarchy.

The root directory of mbed_target directory contains an m-file: \ *setup_mbed_target.m*\ . This files has to be run once before using mbed_target. It adds several folders to the Matlab path and checks/installs several tools in the following sequence:

1. Checking the folder mbed_target\\blocks\\mex if it contains compiled s-functions. If the mexw64 files are missing the setup tries to compile the c-sources. In this case an external c-compiler is necessary. Please see the documentation of \ *mex*\ .

2. Checking the existence of the gcc_arm compiler. The windows commandline tool \ *where*\  is used for this. This can be done manually with \ *where arm-none-eabi-gcc*\ . The output should look like:

  .. code-block:: bash

    C:\Users\oh>where arm-none-eabi-gcc
    E:\IDEs\GNUToolsARMEmbedded\6_2017q1\bin\arm-none-eabi-gcc.exe


  When the toolchain is not correctly installed, e.g. the entry in the path variable is missing, an error is generated. In this case the existence of the toolchain, the correct version and the correct Windows path has to be checked. 

  The GNU ARM Embedded Toolchain version: gcc version 6.3.1 20170215 (release) [ARM/embedded-6-branch revision 245512] (GNU Tools for ARM Embedded Processors 6-2017-q1-update) is recommended for the included version mbed os 5.5.

3. Checking the existence of Python. Please be aware that version 2.7 is necessary. The mbed build system is currently not compatible with Python 3! Because the Python package installer pip is used, a Python version newer than 2.7.9 is necessary or pip has to be installed manually. The version 2.7.13 is recommended for the included version mbed os 5.5.

4. When the Python check was ok then the mbed requirements are installed. This can also be done manually with \ *pip install -r requirements.txt*\  in the mbed_target\\targets\\mbed-os folder.

5. When the Python check was ok then a list of mbed os 5 compatible targets is displayed. This can also be done manually with \ *python tools\project.py -S targets*\  in the mbed_target\\targets\\mbed-os folder.

6. Checking the existence of \ *mbedls*\ . This is an additional, external mbed tool to check a connected target board. When the tool is not available the setup asked to install it. This can also be done manually with \ *pip install mbed-ls*\ .

7. The last check is the verification of the mbed_target installation path. Only the name is checked and not the path length. Strange compiler or linker error later when generating a Simulink model can be an indication of a too long installation path.

The output in the Matlab command window should be checked after the execution of \ *setup_mbed_target.m*\  if an error happened or a version number does not meets the requirements.
