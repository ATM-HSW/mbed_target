I2C Write
=========

Description
-----------

This block writes one or multiple bytes to a device at the given bus address. The address must be provided as an 8 bit address regardless of the value of the LSB (read/write bit). 

The block interface can be configured by the Parameters Dialog Box:

- The minimal variant has a static i2c address and writes a predefined number of bytes to the device. 

.. image:: ../images/block_I2C_Write_min.png
   :scale: 50 %

- The maximal variant allows a dynamic i2c address and a dynamic number of bytes to be written. The ack port outputs communication errors.

.. image:: ../images/block_I2C_Write_max.png
   :scale: 50 %

Data Type Support
-----------------

All input ports expect an *uint8* data type.
The output port writes values with an *uint8* data type.

Parameters Dialog Box
---------------------

.. image:: ../images/mask_I2C_Write.png


I2C Port
........

specifies an internal used I2C port number. It is used to generate unique instance names when more I2C busses are used in the same model and to tie config, read and write blocks together.


Enable address input port
.........................

Enables an input port that provides the device address to which the mcu should write data.

The address input port enables writing to different devices with the same write block by changing the value at the address input port.

Slave address
.............

8bit address of the i2c bus device.

.. note::
  If the Enable address input port is checked the value of this parameter field is ignored.

Enable byte count input port
............................

If the number of data to be written changes during program execution the Enable byte count input port can be checked to provide the amount of data to be written to the slave device.

.. note::
  The maximum number of bytes to be writen is defined by the input port width in simulink.

Repeated
........

If enabled no I2C STOP condition is send after completing the write operation.


Enable ack output port
......................

Enables a block output port where the success of the operation can be read. Please see the mbed documentation for further information.

* "0" output: no error during communication
* "1" output: error during communication

Example
-------

In the example data read from a PCF8574 at address 0x40 is bitmasked. Bits 0 and 1, used as inputs, are written to LED1 and LED2. 

The user button is written to bit 3 of the PCF8574. Unused bits and both input bits has to be set to 1 (please see the datasheet). The result is written back to the PCF8574.

.. image:: ../images/example_I2C.png
   :scale: 50 %


Code Generation
---------------
Instance names of mbed I2C classes are created by concatenating \ **i2c**\  and \ **<I2C Port>**\ .

Step Function
.............

creates one line in void **<Model Name>**\ _step(void) function

.. code-block:: c++

  lvalue = (uint8_T)i2c<I2C Port>.write(<Slave address>, <Addr of Inputbuffer>, <Length of Inputbuffer>, <Repeated>);

when Enable ack output port is checked or

.. code-block:: c++

  i2c<I2C Port>.write(<Slave address>, <Addr of Inputbuffer>, <Length of Inputbuffer>, <Repeated>);

when Enable ack output port is unchecked. <Slave address> and <Length of Inputbuffer> are defined by the block mask or can come from input ports.
