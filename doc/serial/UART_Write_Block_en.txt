Serial Write Block
==================

Description
-----------

Writes the one dimensional uint8 vector from input port d to the serial port. 

When datasize port is disable, the whole input vector is send.

When datasize port is enabled, a vector lenght, read from input port n, is used.

When the Mbed target supports DEVICE_SERIAL_ASYNCH, the asynchronous method is used i.e. the block does not delay the execution.

.. image:: ../images/block_UART_SerialWriteBlock.png
   :scale: 50 %

Data Type Support
-----------------

The input port d expects an *uint8* data type and input port n expects an *uint32* data type

Parameters Dialog Box
---------------------

.. image:: ../images/mask_UART_SerialWriteBlock.png

Serial Port
...........
specifies an internal used serial port number. It is used to generate unique instance names when more UARTs are used in the same model and to tie config, read and write blocks together.

Enable datasize Port
....................
enables the optional input port n for the data vector length.

Sample Time
...........
specifies the time interval between samples. To inherit the sample time, set this parameter to -1.


.. _example_UART_Write_Block:

Example
-------

In the example a data block with 4 bytes is read from UART input. Each of these four bytes are converted to decimal numbers with the CSV Writer Block. The result is written back to the output of the same UART.

.. image:: ../images/example_UART_ReadWriteBlock.png
   :scale: 50 %


Code Generation
---------------
Instance names of mbed classes are created by concatenating model name (, submodelnames) and block name (\ **<Model Name>**\ _(**<Subblock Name>**\ _...)\ **<Block Name>**\ \ **<Serial Port>**\ ). Space and minus characters are substituted by underscore ('_') characters.

Step Function
.............

creates the following block in void **<Model Name>**\ _step(void) function

.. code-block:: c++

  %if <enabled n port>
      <num_bytes> = <n>
  %else
      <num_bytes> = sizeof(<d>)
  %endif

  #if DEVICE_SERIAL_ASYNCH
    const uint8_t* ptr = (const char*)<d>;
    int len = <num_bytes>;
    <instance name>.write(ptr, len, 0, 0);
  #else
    const char* ptr = (const char*)<d>;
    const char* end = ptr + <n>;
    while (ptr != end) {
      if (<instance name>.putc(*ptr++) == EOF) {
        break;
      }
    }
  #endif

