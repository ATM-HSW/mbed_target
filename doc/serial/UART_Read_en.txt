Serial Read Byte
================

Description
-----------

Reads one uint8 or int16 from the serial port. Data type depends on enabled/disabled new port.

Without new port, outputs -1 if no readable data is available.

When new port is enabled and new data is available, a rising edge is submitted.

.. image:: ../images/block_UART_SerialReadByte.png
   :scale: 50 %

Data Type Support
-----------------

The output port d writes values with *uint8* (when new port ist enabled) or *int16* (when new port is disabled) data types.

The output port new writes values with *uint8* data types.

Parameters Dialog Box
---------------------

.. image:: ../images/mask_UART_SerialReadByte.png

Serial Port
...........
specifies an internal used serial port number. It is used to generate unique instance names when more UARTs are used in the same model and to tie config, read and write blocks together.

Enable new data port
....................
enables/disables the new data port. The port submitts a rising edge when new data is received.

Sample Time
...........
specifies the time interval between samples. To inherit the sample time, set this parameter to -1.

Example
-------

see UART Write Byte block :ref:`example_UART_Write`.

Code Generation
---------------
Instance names of mbed classes are created by concatenating model name (, submodelnames), block name and Serial Port number (\ **<Model Name>**\ _(**<Subblock Name>**\ _...)\ **<Block Name>**\ \ **<Serial Port>**\ ). Space and minus characters are substituted by underscore ('_') characters.

Step Function
.............

creates the following block in void **<Model Name>**\ _step(void) function without new data port

.. code-block:: c++

  if (<instance name>.readable()) {
    lvalue = <instance name>.getc();
  } else {
    lvalue = -1;
  }

and with new data port

.. code-block:: c++

  if (<instance name>.readable()) {
    lvalue1 = <instance name>.getc();
    lvalue2 = 1;
  } else {
    lvalue2 = 0;
  }
