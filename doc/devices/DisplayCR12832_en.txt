
.. _DisplayCR12832:

CR12832 Display
===============

Description
-----------

The block shows three text rows in a 128x32 display NHD-C12832A1Z

In each row a variable number of inputs with different data types can be displayed.

- For each row two options has to be configured:

1. Type of Inputs:

  a cell array with a data type for each input value whereas the data types are "boolean", "uint8", "int8", "uint16", "int16", "uint32", "int32", "single", "double", 


2. printf

  standard c printf format string with following format specifiers: boolean - %u, uint8 - %hu, int8 - %hd, uint16 - %u, int16 - %u, uint32 - %lu, int32 - %lu, single - %f, double - %lf

  The number of cell array items in both config options has to be identical.


- SPI Port - SPI Port Number configured in SPI init block

- Pins for Chip Select, Reset and A0 for the CR12832 interface

.. image:: ../images/block_CR12832.png
   :scale: 50 %

Data Type Support
-----------------

The input port(s) expects values with the defined data types.

Parameters Dialog Box
---------------------

.. image:: ../images/mask_CR12832.png

Types of Inputs (Row x) and printf
..................................

See the above description.


SPI Port
........

Selects the SPI peripheral wich is configured by an *SPI Master Config* block.

Chip Select Port and Pin
........................

specifies the MCU Pin the device's chip select input is connected to.


Reset Port and Pin
....................

specifies the MCU Pin the device's reset input is connected to.

A0 Port and Pin
....................

specifies the MCU Pin the device's address 0 input is connected to.

Sample Time
...........

specifies the time interval between samples. To inherit the sample time, set this parameter to -1.

Example
-------

The example is an test application for the Mbed Application shield. The values of an I2C temperature sensor, both analog potentiometers and the navigation switch are shown in the display.

.. image:: ../images/example_CR12832.png
   :scale: 50 %


Code Generation
---------------
Instance names of mbed classes are created by concatenating model name (, submodelnames) and block name (\ **<Model Name>**\ _(**<Subblock Name>**\ _...)\ **<Block Name>**\ ). Space and minus characters are substituted by underscore ('_') characters.

The block utilizes the CR12832 library https://os.mbed.com/users/chris/code/C12832/ 

Global parts
............

creates a global instance

.. code-block:: c++

  <instance> = <SPI Port><Chip Select Port and Pin>;
  C12832 c12832_%<instance>(&spi<SPI Port>, <Reset Port and Pin>, <A0 Port and Pin>, <Chip Select Port and Pin>);


Initialization Function
.......................

creates a few initialization lines

.. code-block:: c++

  <instance> = <SPI Port><Chip Select Port and Pin>;
  spi<SPI Port>.format(8,3);                 // 8 bit spi mode 3
  c12832_<instance>.cls();


Step Function
.............

creates several lines in void **<Model Name>**\ _step(void) function. The creation of formatstrings \ **<textx>**\ and the parameter lists \ **<plistx>**\ is not shown here.

.. code-block:: c++

  lvalue1  = (uint16_T)<instance name>.read_u16());
  lvalue2  = (real32_T)<instance name>.read();

  <instance> = <SPI Port><Chip Select Port and Pin>;
  c12832_%<instance>.locate(0,0);
  c12832_%<instance>.printf("<text1>" <plist1>);

  c12832_%<instance>.locate(0,11);
  c12832_%<instance>.printf("<text2>" <plist2>);

  c12832_%<instance>.locate(0,22);
  c12832_%<instance>.printf("<text3>" <plist3>);
