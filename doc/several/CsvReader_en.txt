CSVReader
=========

Description
-----------

Reads an input vector in the scanf style. The number of, the width and the data type of each input port can be configured.

Input port:
 - vector of uint8 (character array)

Type of Outputs (List of 2-tuples):
 - 1st tuple item: Port width
 - 2nd tuple item: Port data type (single, double, int8, int16, int32, uint8, uint16, uint32, bool) 
 - e.g.: {'8*uint8' '1*int16'} for the block below

Output port:
 The number of output ports, their width and data types correspond to the number of cell items in \ **Type of Outputs**\  config option.

.. image:: ../images/block_several_CSVReader.png
   :scale: 50 %

Data Type Support
-----------------

The input port expects a vector with *uint8* data type.

The output port(s) writes values with the defined data types.

Parameters Dialog Box
---------------------

.. image:: ../images/mask_several_CSVReader.png

Types of Outputs
................

See the above description.


Sample Time
...........
specifies the time interval between samples. To inherit the sample time, set this parameter to -1.


Example
-------

see CSV Write Block block :ref:`example_several_csvreaderwriter`


Code Generation
---------------
Instance names of mbed classes are created by concatenating model name (, submodelnames) and block name (\ **<Model Name>**\ _(**<Subblock Name>**\ _...)\ **<Block Name>**\ ). Space and minus characters are substituted by underscore ('_') characters.

Global parts
............

creates a global instance

.. code-block:: c++

  xx <instance name>(P<Port Name>_<Pin Number>);

in \ **<Model Name>**\ .cpp.

Step Function
.............

creates two lines in void **<Model Name>**\ _step(void) function

.. code-block:: c++

  lvalue1  = (uint16_T)<instance name>.read_u16());
  lvalue2  = (real32_T)<instance name>.read();
