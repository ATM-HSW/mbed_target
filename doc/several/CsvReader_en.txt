CSVReader
=========

Description
-----------

Reads an input vector in scanf style. The number of, the width and the data type of each input port can be configured.

Input port:
 - vector of uint8 (character array)

Type of Outputs (List of 2-tuples):
 - 1st tuple item: Port width
 - 2nd tuple item: Port data type (single, double, int8, int16, int32, uint8, uint16, uint32, bool) 
 - e.g.: {'8*uint8' '1*int16'} for the block below

Output port:
 The number of output ports, their width and data types correspond to the number of cell items in \ **Type of Outputs**\  config option.

.. image:: ../images/block_several_CSVReader.png
   :scale: 50 %

Data Type Support
-----------------

The input port **d** expects a vector with *uint8* data type. It has to be a 0-terminated string.

The output port(s) writes values with the defined data types.

Parameters Dialog Box
---------------------

.. image:: ../images/mask_several_CSVReader.png

Types of Outputs
................

See the above description.

Buffer Size
...........
specifies the maximum number of uint8 which can be received at **d** 

Sample Time
...........
specifies the time interval between samples. To inherit the sample time, set this parameter to -1.


Example
-------

see CSV Write Block block :ref:`example_several_csvreaderwriter`


Code Generation
---------------
Instance names of mbed classes are created by concatenating model name (, submodelnames) and block name (\ **<Model Name>**\ _(**<Subblock Name>**\ _...)\ **<Block Name>**\ ). Space and minus characters are substituted by underscore ('_') characters.

Global parts
............

creates a global instance

.. code-block:: c++

  uint8_t <instance name>_temp;


and a strnlen implementation for uVision. This function is a GNU C Lib extension and therefor not necessary within the code generation process when compiling with GNU ARM gcc. 

.. code-block:: c++

  #ifdef __UVISION_VERSION
  size_t strnlen (const char* s, size_t maxlen)
  {
    size_t len = 0;
    while ((len <= maxlen) && (*s)) {
      s++;
      len++;
    }
    return len;
  }
  #endif    


in \ **<Model Name>**\ .cpp.

Step Function
.............

creates several lines in void \ **<Model Name>**\ _step(void) function

.. code-block:: c++

  <instance name>_temp = strnlen((const char*)<address of d>, <length of d>);
  if(<instance name>_temp > 0)
    sscanf((const char*)<address of d>, "<formatstring>", <varliste> &<instance name>_temp);


where \ **<formatstring>**\  and \ **<varliste>**\  are build up from \ **Types of Outputs**\ 
