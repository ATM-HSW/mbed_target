Thread
======

Description
-----------

Creates a RTOS thread with the specified priority. 

Stack size can be DEFAULT_STACK_SIZE or have an individual value. DEFAULT_STACK_SIZE is compiler and target specific.

The function call subsystem is called in an endless loop without wait calls when Timing == 0 or a Thread:wait as last method call at the end of the endless loop.

.. image:: ../images/block_RTOSThread.png
   :scale: 50 %

Data Type Support
-----------------

The Thread block outputs a signal of type *fcn_call*.

Parameters and Dialog Box
-------------------------

.. image:: ../images/mask_RTOSThread.png

Thread Priority
...............
specifies the thread priority argument for calling the Thread constructor.

- idle (lowest)
- low
- below normal
- normal (default)
- above normal
- high
- realtime (highest)

Stack size
...........
specifies the stacksize argument for calling the Thread constructor. *Default* uses the size defined in mbed, *User defined* allows to overwrite this value.

Size (bytes):
.............
specifies the value of the user defined stack size of this thread.

Timing (ms):
............
a Thread::Wait with the specified waiting time in ms is called as the last method in the endless while. Please be aware that the behaviour is non-equidistant.

Example
-------

In the example two LEDs are blinking. LED1 is blinking in the same way like in the Blinky example. LED2 is controled by a Thread which executions the function-call subsystem in an endless loop with a Thread::wait call at the loop end.

The periode is 500ms+execution time of the subsystem.

.. image:: ../images/example_RTOS_Thread_Blinky.png
   :scale: 50 %


Code Generation
---------------
Instance names of mbed classes are created by concatenating model name (, submodelnames) and block name (\ **<Model Name>**\ _(**<Subblock Name>**\ _...)\ **<Block Name>**\ ). Space and minus characters are substituted by underscore ('_') characters.

In \ **ert_main**\ .cpp

- an external reference

.. code-block:: c++

  extern void <instance name>_RTOS_Thread_thread();

- and a Thread instance creation+start in the main function

.. code-block:: c++

  Thread <instance name>_blinky_RTOS_Thread(<Thread Priority>, <Size (bytes)> or DEFAULT_STACK_SIZE);
  <instance name>.start(callback(<instance name>_RTOS_Thread_thread));

are created. The callback function <instance name>_RTOS_Thread_thread is generated in \ **<Model Name>**\ .cpp.

In \ **<Model Name>**\ .cpp a separate function for the whole function-call subblock, the Thread callback function with an enclosing *while(1)*,

.. code-block:: c++

  void <instance name>_RTOS_Thread_thread(void const *argument)
  {
    while (1) {
      // Output and update for function-call system: '<Root>/FunctionCall Subsystem' 
      {
      ...
      Thread::wait(<Timing>);
      }
    }
  }

is created.

.. warning::
  With Timing = 0 the while loop runs with the maximal speed - no waits! Please use mechanisms like blocking read or write from Mail queue class or a wait block.
