CAN Send
========

Description
-----------
This block writes one or multiple bytes to the CAN instance specified with CAN Port with the given message ID.

A vector of values at input port d and the data length taken from input port n is used to send a CAN message. The message ID is a block parameter.

.. image:: ../images/block_CAN_Send.png
   :scale: 50 %


Data Type Support
-----------------
The d port expects an *uint8*  data type.

The n port expects an *uint32* data type.

.. warning::
  A CAN message can only utilize up to 16 bytes per message.


Parameters Dialog Box
---------------------

.. image:: ../images/mask_CAN_Send.png


CAN Port
........
Specifies an internally used CAN bus number. It is used to generate unique instance names when more CAN busses are included in the same model and to tie config, read and write blocks together.


Msg ID
......
Sets the message ID the CAN message is send with.


Example
-------
Please see the :ref:`serial_CAN_Config_en_Example-label` shown in CAN Config documentation.

Code Generation
---------------
Instance names of mbed CAN classes are created by concatenating \ **can**\  and \ **<CAN Port>**\ .


Step Function
.............
creates one line in void **<Model Name>**\ _step(void) function

.. code-block:: c++

  can<CAN Port>.write(CANMessage(<msg id>,*<message data >,<message length n>));
