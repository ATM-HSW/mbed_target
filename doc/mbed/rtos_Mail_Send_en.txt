Mail Send
=========

Description
-----------

Creates a rtos mailbox with the instance number 1...9.

The maximal number of mails can be configured. Writing one mail more then this size will suspend the writing thread until the next mail is read.

Each mail can contain the specified number of elements with the specified type.  

.. image:: ../images/block_RTOSMailSend.png
   :scale: 50 %


Data Type Support
-----------------

The input port expects values with configured data type. Single or vector values are expected, depending on the configured Number of input elements parameter.

Parameters and Dialog Box
-------------------------

.. image:: ../images/mask_RTOSMailSend.png

Mail Instance Number
....................
specifies an internal mail box number. It is used to generate unique instance names when more mail boxes are included in the same model and to tie Mail Send and mail Receive blocks together.

Number of mails in queue
........................
specifies the maximal numer of mails in the mail queue. Writing one more mail than this numer blocks the writing thread until at least one mail is read by the connected Mail Receive block.

Number of input elements
........................
specifies the number of data elements in each mail.

Data type
.........
specifies the data type of each element in a mail. All data elements have the same type. The following types are possible:

- double
- single
- int8
- uint8
- int16
- uint16
- int32
- uint32

Example
-------

The example realises again a LED blinking. This time the generator creates periodically mails. The function call subblock runs in a Thread in an endless loop without wait. 
But reading from an empty Mail queue blocks the thread until a message is received. When it received one, the contents, a single *uint8* value, is written to LED1. Then following Mail Receive blocks again until the next mail is generated.

.. image:: ../images/example_RTOS_Mail_Blinky.png
   :scale: 50 %

Code Generation
---------------
Instance name of mbed class Mail is created by concatenating mail_box and the Mail Instance Number: mail_box<Mail Instance Number>

Global parts
............

creates a data type

.. code-block:: c++

  typedef <Data type> mail<Mail Instance Number>_T[<Number of input elements>];

and globaly a variable and an instance

.. code-block:: c++

  const int mail<Mail Instance Number>_len = sizeof(<Data type>)*<Number of input elements>;
  Mail<mail<Mail Instance Number>_T,<Number of input elements>> mail_box<Mail Instance Number>;


in \ **<Model Name>**\ .cpp.

Step Function
.............

creates three lines in void **<Model Name>**\ _step(void) function

.. code-block:: c++

  mail<Mail Instance Number>_T *mail = mail_box<Mail Instance Number>.alloc();
  memcpy(mail, <pointer to input port data vector>, mail<Mail Instance Number>_len);
  mail_box<Mail Instance Number>.put(mail);

Here is a concrete example with Mail Instance Number = 1

.. code-block:: c++

  mail1_T *mail = mail_box1.alloc();
  memcpy(mail, &rtb_DataTypeConversion, mail1_len);
  mail_box1.put(mail);
