%% File : sfunar_encoderInput.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements sfunar_createThread "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>
  
  %% global string buffers for rtos thread instances and thread function prototypes
  %% for insertion in mbed_srmain.tlc
  %assign ::ThreadInstances = ""
  %assign ::ThreadPrototypes = ""
    
%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  
  %assign p1_val = LibBlockParameterValue(p1, 0)
  %assign p2_val = LibBlockParameterValue(p2, 0)
  %assign p3_val = LibBlockParameterValue(p3, 0)
  %assign p4_val = CAST("Number",LibBlockParameterValue(p4, 0))  
  %assign p5_val = CAST("Number",LibBlockParameterValue(p5, 0))
   
  %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
  %assign name = FEVAL("strrep",name," ","_")

  %switch(p1_val)
    %case(1)
        %assign ThreadPriority = "osPriorityIdle"
        %break
    %case(2)
        %assign ThreadPriority = "osPriorityLow"
        %break
    %case(3)
        %assign ThreadPriority = "osPriorityBelowNormal"
        %break
    %case(4)
        %assign ThreadPriority = "osPriorityNormal"
        %break
    %case(5)
        %assign ThreadPriority = "osPriorityAboveNormal"
        %break
    %case(6)
        %assign ThreadPriority = "osPriorityHigh"
        %break
    %case(7)
        %assign ThreadPriority = "osPriorityRealtime"
        %break
    %default
        %assign ThreadPriority = "osPriorityNormal"
  %endswitch

  %if p3_val == 1
    %assign StackSize = "DEFAULT_STACK_SIZE"
  %else
    %assign StackSize = p4_val
  %endif
  
  %if !SLibCodeGenForSim()
	%% if thread is asynchronous create normal rtos thread instance
    %if p2_val == 0
		%openfile ::ThreadInstances, "a"
		/* %<Type> block: %<Name> */    
		Thread %<name>(%<name>_thread, NULL, %<ThreadPriority>, %<StackSize>);		
		%closefile ::ThreadInstances
	%% if thread is synchronous create periodic rtos timer to call thread function
    %else
		%openfile ::ThreadInstances, "a"
		/* %<Type> block: %<Name> */		
        RtosTimer %<name>(%<name>_thread, osTimerPeriodic, NULL);		
		%<name>.start(%<p5_val>);
		%closefile ::ThreadInstances
    %endif
  %endif

  %if !SLibCodeGenForSim()
	%openfile ::ThreadPrototypes, "a"		
        extern void %<name>_thread(void const *argument);
	%closefile ::ThreadPrototypes
  %endif
  
  %if !SLibCodeGenForSim()
      %openfile declbuf
      /* %<Type> block: %<Name> */
      %if p2_val == 0
        void %<name>_thread(void const *argument)
        {
          while(1)
              %<LibBlockExecuteFcnCall(block,0)>
        }
      %else
        void %<name>_thread(void const *argument)
            %<LibBlockExecuteFcnCall(block,0)>
      %endif

      %closefile declbuf
      %assign srcFile = LibGetModelDotCFile()
      %<LibSetSourceFileSection(srcFile, "Functions", declbuf)>
  %endif
    
%endfunction
