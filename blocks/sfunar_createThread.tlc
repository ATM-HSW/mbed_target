%% File : sfunar_encoderInput.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements sfunar_createThread "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output

  %assign priority_val = LibBlockParameterValue(p1, 0) %% Priority
  %assign stackOption_val = LibBlockParameterValue(p2, 0) %% StackOption
  %assign stackSize_val = CAST("Number",LibBlockParameterValue(p3, 0)) %% Stacksize
  %assign timing_val = CAST("Number",LibBlockParameterValue(p4, 0))  %% Timing

  %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
  %assign name = FEVAL("strrep",name," ","_")

  %switch(priority_val)
    %case(1)
        %assign ThreadPriority = "osPriorityIdle"
        %break
    %case(2)
        %assign ThreadPriority = "osPriorityLow"
        %break
    %case(3)
        %assign ThreadPriority = "osPriorityBelowNormal"
        %break
    %case(4)
        %assign ThreadPriority = "osPriorityNormal"
        %break
    %case(5)
        %assign ThreadPriority = "osPriorityAboveNormal"
        %break
    %case(6)
        %assign ThreadPriority = "osPriorityHigh"
        %break
    %case(7)
        %assign ThreadPriority = "osPriorityRealtime"
        %break
    %default
        %assign ThreadPriority = "osPriorityNormal"
  %endswitch

  %if stackOption_val == 1
    %assign StackSize = "DEFAULT_STACK_SIZE"
  %else
    %assign StackSize = stackSize_val
  %endif

  %if !SLibCodeGenForSim()
    %assign ertMainFile = LibCreateSourceFile("Source", "Custom", "ert_main")

    %openfile declbuf
    /* %<Type> block: %<Name> */
    extern void %<name>_thread(void const *);
	extern osThreadId %<name>_id;
    %closefile declbuf
    %<LibAddSourceFileCustomSection(ertMainFile,"Declarations","Ert_main_glob_decl")>
    %<LibSetSourceFileCustomSection(ertMainFile,"Ert_main_glob_decl",declbuf)>
	
    %openfile declbuf
    /* %<Type> block: %<Name> */
	void %<name>_callback(void const *param)
	{
	  osSignalSet(%<name>_id, 0x1);
	  // Get model outputs here
	}
    %closefile declbuf
    %<LibAddSourceFileCustomSection(ertMainFile,"Declarations","Ert_main_fcn_decl")>
    %<LibSetSourceFileCustomSection(ertMainFile,"Ert_main_fcn_decl",declbuf)>

    %openfile declbuf
    /* %<Type> block: %<Name> */
        Thread %<name>(%<name>_thread, NULL, %<ThreadPriority>, %<StackSize>);
        RtosTimer %<name>_timer(%<name>_callback, osTimerPeriodic, NULL);
    %closefile declbuf
    %<LibAddSourceFileCustomSection(ertMainFile,"Declarations","Ert_main_loc_decl")>
    %<LibSetSourceFileCustomSection(ertMainFile,"Ert_main_loc_decl",declbuf)>

    %openfile buff
        /* %<Type> block: %<Name> */    
        %<name>_timer.start(%<timing_val>);
    %closefile buff
    %<LibAddSourceFileCustomSection(ertMainFile,"Declarations","Ert_main_after_init")>
    %<LibSetSourceFileCustomSection(ertMainFile,"Ert_main_after_init",buff)>

  %endif

  %if !SLibCodeGenForSim()
    %openfile declbuf
    /* %<Type> block: %<Name> */
	void %<name>_thread(void const *argument) {
	%<name>_id = Thread::gettid();
	while(1) {
      Thread::signal_wait(0x1,osWaitForever);
	  %<LibBlockExecuteFcnCall(block,0)>
	}
	}
    %closefile declbuf
    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Functions", declbuf)>
	
	%openfile declbuf	
		osThreadId %<name>_id;
	%closefile declbuf	
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>
  %endif

%endfunction
