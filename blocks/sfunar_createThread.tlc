%% File : sfunar_encoderInput.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements sfunar_createThread "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>
    
%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  
  %assign p1_val = LibBlockParameterValue(p1, 0)
  %assign p2_val = LibBlockParameterValue(p2, 0)
  %assign p3_val = LibBlockParameterValue(p3, 0)
  %assign p4_val = CAST("Number",LibBlockParameterValue(p4, 0))
   
  %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
  %assign name = FEVAL("strrep",name," ","_")

  %switch(p1_val)
    %case(1)
        %assign ThreadPriority = "osPriorityIdle"
        %break
    %case(2)
        %assign ThreadPriority = "osPriorityLow"
        %break
    %case(3)
        %assign ThreadPriority = "osPriorityBelowNormal"
        %break
    %case(4)
        %assign ThreadPriority = "osPriorityNormal"
        %break
    %case(5)
        %assign ThreadPriority = "osPriorityAboveNormal"
        %break
    %case(6)
        %assign ThreadPriority = "osPriorityHigh"
        %break
    %case(7)
        %assign ThreadPriority = "osPriorityRealtime"
        %break
    %default
        %assign ThreadPriority = "osPriorityNormal"
  %endswitch

  %if p3_val == 1
    %assign StackSize = DEFAULT_STACK_SIZE
  %else
    %assign StackSize = p4_val
  %endif

  %if !SLibCodeGenForSim()
    %openfile buff
    /* %<Type> block: %<Name> */
    
    %if p2_val == 0
        Thread %<name>(%<name>_thread, NULL, %<ThreadPriority>, %<StackSize>);
    %else
        RtosTimer %<name>(%<name>_thread, osTimerPeriodic, NULL);
        %<name>.start(1);
    %endif
    %closefile buff
    %<LibMdlRegCustomCode(buff,"execution")>
  %endif

  
  %if !SLibCodeGenForSim()
      %openfile declbuf
      /* %<Type> block: %<Name> */
      %if p2_val == 0
        void %<name>_thread(void const *argument)
        {
          while(1)
              %<LibBlockExecuteFcnCall(block,0)>
        }
      %else
        void %<name>_thread(void const *argument)
            %<LibBlockExecuteFcnCall(block,0)>
      %endif

      %closefile declbuf
      %assign srcFile = LibGetModelDotCFile()
      %<LibSetSourceFileSection(srcFile, "Functions", declbuf)>
  %endif
  
%endfunction


%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output

    %%assign u1_val = LibBlockInputSignal(0, "", "", 0)
	%%assign y1_val = LibBlockOutputSignal(0, "", "", 0)

    %%assign p2_val = CAST("Number",LibBlockParameterValue(p2, 0))	
    %%assign p4_val = CAST("Real",LibBlockParameterValue(p4, 0))

    %%
    %if !SLibCodeGenForSim()
        
    %endif
%endfunction
