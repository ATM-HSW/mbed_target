%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2014 Dr.O.Hagendorf, HS Wismar
%% FRAM Modifications by Axel Utech 2014, HS Wismar

%implements sfunar_spiFramConfig "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void
  
  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output

  %assign p2_val = LibBlockParameterValue(p1,0)
  %assign p3_val = LibBlockParameterValue(p2,0)
  %assign cs_name = "P" + FEVAL("char",p2_val+64) + "_" + FEVAL("int2str",p3_val-1)


  %if !SLibCodeGenForSim()
    %openfile declbuf
    %%
    #if !defined(SPI_INTERFACE_DEFINED)
        #error "No SPI Interface defined! Add a \"SPI-Config\" Block!"
    #endif

#if defined(SPI_FRAM_DEVICE)
    #error "Multiple SPI FRAM Config blocks not supported"
#endif
#define SPI_FRAM_DEVICE

DigitalOut cs_fram(%<cs_name>);

#define FM25L16B_OPCODE_WREN (0b0110)
#define FM25L16B_OPCODE_WRDI (0b0100)
#define FM25L16B_OPCODE_RDSR (0b0101)
#define FM25L16B_OPCODE_WRSR (0b0001)
#define FM25L16B_OPCODE_READ (0b0011)
#define FM25L16B_OPCODE_WRITE (0b0010)

uint8_t fm25_readStatus(void) {
	uint8_t data;

	cs_fram = 0;
	spi.write(FM25L16B_OPCODE_RDSR);
	data = spi.write(0);
	cs_fram = 1;
	return data;
}

void fm25_sendWriteEnable(void) {
	cs_fram = 0;
	spi.write(FM25L16B_OPCODE_WREN);
	cs_fram = 1;
}

bool fram_write(uint8_t pageAdr, uint8_t wordAdr, uint8_t* buf,
		uint16_t dataLength) {
	fm25_sendWriteEnable();
	cs_fram = 0;
	spi.write(FM25L16B_OPCODE_WRITE);
	spi.write(pageAdr);
	spi.write(wordAdr);
	for (int i = 0; i < dataLength; ++i) {
		spi.write(buf[i]);
	}
	cs_fram = 1;
	return true;
}

bool fram_read(uint8_t pageAdr, uint8_t wordAdr, uint8_t* buf,
		uint16_t dataLength) {
	cs_fram = 0;
	spi.write(FM25L16B_OPCODE_READ);
	spi.write(pageAdr);
	spi.write(wordAdr);
	for (int i = 0; i < dataLength; ++i) {
		buf[i] = spi.write(0);
	}
	cs_fram = 1;
	return true;
}


    %%
    %closefile declbuf
    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Functions", declbuf)>
    cs_fram=1;
  %endif
%endfunction
