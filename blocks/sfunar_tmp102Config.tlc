%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2014 Dr.O.Hagendorf, HS Wismar
%% TMP102 Modifications by Axel Utech 2014, HS Wismar

%implements sfunar_tmp102Config "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void
  
  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output

  %assign p1_val = LibBlockParameterValue(p1,0)
  %assign p2_val = LibBlockParameterValue(p2,0)

  %if !SLibCodeGenForSim()
    %openfile declbuf
    %%
    #if !defined(I2C_INTERFACE_DEFINED)
        #error "No I2C Interface defined! Add a \"I2C-Config\" Block!"
    #endif

#if defined(TMP102_ADDR_DEVICE)
    #error "Multiple TMP102 Config blocks!"
#endif

#define TMP102_ADDR_DEVICE (%<p1_val>)
#define TMP102_ADDR (0x90 | TMP102_ADDR_DEVICE)

#define TMP102_REG_TEMP (0x00) // Temperature Register
#define TMP102_REG_CONF (0x01) // Configuration Register

#define TMP102_CONVERSION_RATE_0_25HZ (0)
#define TMP102_CONVERSION_RATE_1HZ (1)
#define TMP102_CONVERSION_RATE_4HZ (2)
#define TMP102_CONVERSION_RATE_8HZ (3)

bool tmp102_write(uint8_t pointerReg, bool sendData, uint8_t data1, uint8_t data2){
    
    if(!sendData){
        return i2c.write(TMP102_ADDR, (char*) &pointerReg, 1, 0) == 0;
    }
    
    char buf[3];
    buf[0] = pointerReg;
    buf[1] = data1;
    buf[2] = data2;
    
    return i2c.write(TMP102_ADDR, buf, 3, 0) == 0;
    
}

bool tmp102_read(uint16_t* data){
    return i2c.read(TMP102_ADDR, (char*) data, 2, 0) == 0;
}


bool tmp102_writeConfig(uint8_t conversion_rate){
	return tmp102_write(TMP102_REG_CONF, true, 0, conversion_rate<<6);
}

bool tmp102_getTemperature(uint16_t* data){
	if(!tmp102_write(TMP102_REG_TEMP, false, 0, 0))
		return false;
	return tmp102_read(data);
}

// shift the 16 bits returned to 12 bit temperature data
uint16_t tmp102_shiftResult(uint16_t data){
	return (data >> 12) | (data << 4);
}

// caculate temperatur in °C (works only for T > 0°C)
double tmp102_convertTemp(uint16_t data){
    int16_t bin = data;
	// set upper half byte (twos complement)
	if(bin & (1<<11)){
		bin |= 0xf000;
	}

    return (double)bin * 0.0625;
}



    %%
    %closefile declbuf
    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Functions", declbuf)>
    
    %%
    tmp102_writeConfig(%<p2_val>-1);
    %%
  %endif
%endfunction
