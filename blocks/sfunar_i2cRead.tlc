%% File : sfunar_encoderInput.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements sfunar_i2cRead "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>
    
%endfunction


%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output

	%assign AddressFlag_val = CAST("Number", LibBlockParameterValue(p1, 0))
	%assign SlaveAddress_val = CAST("Number", LibBlockParameterValue(p2, 0))
	%assign ByteCountFlag_val = CAST("Number", LibBlockParameterValue(p3, 0))
	%assign NumBytes_val = CAST("Number", LibBlockParameterValue(p4, 0))
	
	%if AddressFlag_val == 1
		%assign SlaveAddress_val = LibBlockInputSignal(1, "", "", 0)
	%endif
	
	%if ByteCountFlag_val == 1 && AddressFlag_val == 0
		NumBytes_val = LibBlockInputSignal(1, "", "", 0)
	%elseif ByteCountFlag_val == 1 && AddressFlag_val == 1	
		NumBytes_val = LibBlockInputSignal(2, "", "", 0)
	%endif
	
	%assign y1_val = LibBlockOutputSignalAddr(0, "", "", 0)

    %if !SLibCodeGenForSim()	
        i2c.read(%<SlaveAddress_val>,(char_T*)%<y1_val>,%<NumBytes_val>,%<CAST("Number", LibBlockParameterValue(p5, 0))>);
    %endif
%endfunction
