%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2017 Dr.O.Hagendorf , HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%% File : AS5048A_position_sens.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2016 Dr.O.Hagendorf, HS Wismar

%implements AS5048A_position_sens "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction


%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup(block, system) void

  %<LibBlockSetIsExpressionCompliant(block)>

%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()
    %assign nPortName = LibBlockParameterValue(PortName, 0)
    %assign nPinNumber = LibBlockParameterValue(PinNumber, 0)
    %assign pname = "P" + FEVAL("char",nPortName+64) + "_" + FEVAL("int2str",nPinNumber-1)

    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
    %assign name = FEVAL("strrep",name,"-","_")

    %openfile declbuf
    Serial pc(USBTX,USBRX);
    DigitalOut myled(PB_2);

    int AS5048APositionControl=0;

    Timer t;
    int startT=0;
    uint16_T dutyT=0;
    uint16_T dutyTold=0;
    uint16_T dTime=0;
    int n_posCon=0;
    // %<Type> (digitalInput): '%<Name>'
    InterruptIn %<name>(%<pname>);
    %closefile declbuf

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

    %openfile declbuf
    void run(int,int);
    void position(int dutycycle){
    
	//gegen Uhrzeigersinn(Ansicht Rotor in Front):
        for(int s=0;s<11;s++){
			if(dutycycle>=is_step1[s] && dutycycle<is_step2[s]){n_posCon=4;}//ist das der Fall ist Position n=2
			if(dutycycle>=is_step2[s] && dutycycle<is_step3[s]){n_posCon=5;}//ist das der Fall ist Position n=3
			if(dutycycle>=is_step3[s] && dutycycle<is_step4[s]){n_posCon=6;}//ist das der Fall ist Position n=4
			if(dutycycle>=is_step4[s] && dutycycle<is_step5[s]){n_posCon=1;}//ist das der Fall ist Position n=5
			if(dutycycle>=is_step5[s] && dutycycle<is_step6[s]){n_posCon=2;}//ist das der Fall ist Position n=6
			if(dutycycle>=is_step6[s] && dutycycle<is_step1[s]){n_posCon=3;}//ist das der Fall ist Position n=1
        }
    }

    void dutycycle(){
        dutyTold=dutyT;
        dutyT=t.read_high_resolution_us()-startT;
        dTime=1000-dutyTold+dutyT;
        myled=0;
    }

    void period(){
		startT=t.read_high_resolution_us();
        myled=1;
    }
    %closefile declbuf
    %<LibSetSourceFileSection(srcFile, "Functions", declbuf)>
    
    t.start();
    %<name>.rise(&period);
	%<name>.fall(&dutycycle);
  %endif
%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()
    %if !LibBlockOutputSignalIsExpr(0)
      %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
       %assign y1_addr = LibBlockOutputSignalAddr(0, "", "", 0)
       %assign y1_width = LibBlockOutputSignalWidth(0)

      %assign y2_val = LibBlockOutputSignal(1, "", "", 0)
      %assign y3_val = LibBlockOutputSignal(2, "", "", 0)

    
      %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
      %assign name = FEVAL("strrep",name," ","_")
      %assign name = FEVAL("strrep",name,"-","_")
      %%
      //printf("dutycycle is: %d  \n\r",dutyT);
        
        %<y1_val>=dutyT;%%1094861636;
        //pc.printf("winkel raw: %d\n\r",%<y1_val>);
        //fflush(stdout);
        %<y2_val>=dutyT*2*3.14159/914;
        %<y3_val>=(((dutyT<dutyTold)?914+dutyT-dutyTold:dutyT-dutyTold)*2*3.14159/914)/(dTime*1000000);
        
      %%
    %endif 
  %endif
%endfunction


%% Function: BlockOutputSignal ============================================
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %assign retVal = 0U

  %if !SLibCodeGenForSim()
    %switch retType
      %case "Signal"
        %assign y1_val = LibBlockOutputSignal(0, "", "", 0)

        %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
        %assign name = FEVAL("strrep",name," ","_")
        %assign name = FEVAL("strrep",name,"-","_")
        %%
        %assign retVal =  "%<name>"
        %%
        %break
      %default
        %assign errTxt = "Unsupported return type: %<retType>"
        %<LibBlockReportError(block,errTxt)>
        %break
    %endswitch
  %endif
  %return retVal
%endfunction

