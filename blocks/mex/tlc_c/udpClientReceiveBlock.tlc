%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2017 Dr.O.Hagendorf , HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%implements udpClientReceiveBlock "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()

      %assign socket_id = FEVAL("int2str",LibBlockParameterValue(sock_ID,0))
      %assign nBuffer = FEVAL("int2str",LibBlockParameterValue(BufferSize,0))

      %openfile declbuf
      char Recv_Buffer_%<socket_id>[%<nBuffer>] = {'\0'};
      %closefile declbuf 

      %assign srcFile = LibGetModelDotCFile()
      %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

  %endif
%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()

    %assign rollVars = ["U", "Y"]
    %assign nBuffer = FEVAL("int2str",LibBlockParameterValue(BufferSize,0))
    %assign nOutputs = LibBlockNumOutputPorts(block)-1
    %assign Buffidx  = 0
    %assign rolling  = [0: %<nOutputs>]

    %assign socket_id = FEVAL("int2str",LibBlockParameterValue(sock_ID,0))

    %% receive data and distribute them to the outputs
    oUDPSocket_%<socket_id>.recvfrom(&socketAddr_%<socket_id>,Recv_Buffer_%<socket_id>,%<nBuffer>);

    %%distribute data
    %roll sigIdx = rolling, lcv = RollThreshold, block, "Roller", rollVars
      %switch LibBlockOutputSignalDataTypeId(sigIdx)
        %% uint8
        %case 3
          %assign y = LibBlockOutputSignal(sigIdx, "", lcv,sigIdx)
          %<y> = Recv_Buffer_%<socket_id>[%<Buffidx>];
          %assign Buffidx = Buffidx + 1
          %break

        %%uint16
        %case 5
          %assign y = LibBlockOutputSignal(0, "", lcv,sigIdx)
          %<y> = Recv_Buffer_%<socket_id>[%<Buffidx>];
          %assign Buffidx = Buffidx + 1
          (%<y>&0xff00) = Recv_Buffer_%<socket_id>[%<Buffidx>] << 8;
          %assign Buffidx = Buffidx + 1
          %break

        %%uint32
        %case 7
          %assign y = LibBlockOutputSignal(0, "", lcv,sigIdx)
          %<y> = Recv_Buffer_%<socket_id>[%<Buffidx>];
          %assign Buffidx = Buffidx + 1
          (%<y>&0xff00) = Recv_Buffer_%<socket_id>[%<Buffidx>] << 8;
          %assign Buffidx = Buffidx + 1
          (%<y> & 0xff0000) = Recv_Buffer_%<socket_id>[%<Buffidx>] << 16;
          %assign Buffidx = Buffidx + 1
          (%<u> & 0xff000000) = Recv_Buffer_%<socket_id>[%<Buffidx>] << 32;
          %assign Buffidx = Buffidx + 1
          %break

        %default
        %break
      %endswitch

    %endroll
  %endif
%endfunction