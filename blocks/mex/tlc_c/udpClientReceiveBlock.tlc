%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2018 Dr.O.Hagendorf , HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%implements udpClientReceiveBlock "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()

    %assign socket_id = FEVAL("int2str",LibBlockParameterValue(sock_ID,0))
    %assign nBuffer = FEVAL("int2str",LibBlockParameterValue(BufferSize,0))
    %assign bBlocking = FEVAL("int2str",LibBlockParameterValue(Blocking,0))

    %openfile declbuf
    char udpClientRecvBuffer_%<socket_id>[%<nBuffer>] = {'\0'};
    %closefile declbuf 

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

    %if %<bBlocking>==0
    //oUDPSocket_%<socket_id>.set_blocking(false);
    oUDPSocket_%<socket_id>.set_timeout(0);
    %else
    //oUDPSocket_%<socket_id>.set_blocking(true);
    oUDPSocket_%<socket_id>.set_timeout(-1);
    %endif

  %endif
%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()

    %assign nBuffer = FEVAL("int2str",LibBlockParameterValue(BufferSize,0))
    %assign bErrorOutputport = FEVAL("int2str",LibBlockParameterValue(ErrorOutputport,0))

    %assign socket_id = FEVAL("int2str",LibBlockParameterValue(sock_ID,0))

    int retrecv_%<socket_id> = oUDPSocket_%<socket_id>.recvfrom(&udpConfigSocketSocketAddr_%<socket_id>,udpClientRecvBuffer_%<socket_id>,%<nBuffer>);
    %if %<::vSerialDebugInfo>!=0
      printf("udp recvfrom ret: %d\n", retrecv_%<socket_id>);
    %endif

    %assign y_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign y1 = LibBlockOutputSignal(1, "", "", 0)
    %<y1> = retrecv_%<socket_id>>0?retrecv_%<socket_id>:0;
    memcpy(%<y_ptr>, udpClientRecvBuffer_%<socket_id>, %<nBuffer>);

    %if bErrorOutputport
      %assign y2 = LibBlockOutputSignal(2, "", "", 0)
      %<y2> = retrecv_%<socket_id>>0?false:true;
    %endif

  %endif
%endfunction