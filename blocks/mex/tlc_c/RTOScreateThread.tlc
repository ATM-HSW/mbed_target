%% File : sfunar_encoderInput.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015-16 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements RTOScreateThread "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()

    %assign valThreadPriority = LibBlockParameterValue(ThreadPriority, 0) %% Priority
    %assign valStackOption = LibBlockParameterValue(StackOption, 0) %% StackOption
    %assign valStackSize = CAST("Number",LibBlockParameterValue(StackSize, 0)) %% Stacksize
    %assign valTiming = CAST("Number",LibBlockParameterValue(Timing, 0))  %% Timing
  
    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
    %assign name = FEVAL("strrep",name,"-","_")
  
    %switch(valThreadPriority)
      %case(1)
          %assign nThreadPriority = "osPriorityIdle"
          %break
      %case(2)
          %assign nThreadPriority = "osPriorityLow"
          %break
      %case(3)
          %assign nThreadPriority = "osPriorityBelowNormal"
          %break
      %case(4)
          %assign nThreadPriority = "osPriorityNormal"
          %break
      %case(5)
          %assign nThreadPriority = "osPriorityAboveNormal"
          %break
      %case(6)
          %assign nThreadPriority = "osPriorityHigh"
          %break
      %case(7)
          %assign nThreadPriority = "osPriorityRealtime"
          %break
      %default
          %assign nThreadPriority = "osPriorityNormal"
    %endswitch
  
    %if valStackOption == 1
      %assign nStackSize = "DEFAULT_STACK_SIZE"
    %else
      %assign nStackSize = valStackSize
    %endif

    %assign ertMainFile = LibCreateSourceFile("Source", "Custom", "ert_main")

    %openfile declbuf
    /* %<Type> block: %<Name> */
    extern void %<name>_thread(void const *);
    %if valTiming > 0
      extern osThreadId %<name>_id;
    %endif
    %closefile declbuf

    %<LibAddSourceFileCustomSection(ertMainFile,"Declarations","Ert_main_glob_decl")>
    %<LibSetSourceFileCustomSection(ertMainFile,"Ert_main_glob_decl",declbuf)>

    %if valTiming > 0
      %openfile declbuf
      /* %<Type> block: %<Name> */
      void %<name>_callback(void const *param)
      {
        osSignalSet(%<name>_id, 0x1);
      }
      %closefile declbuf
      %<LibAddSourceFileCustomSection(ertMainFile,"Declarations","Ert_main_fcn_decl")>
      %<LibSetSourceFileCustomSection(ertMainFile,"Ert_main_fcn_decl",declbuf)>
    %endif

    %openfile declbuf
    /* %<Type> block: %<Name> */
    Thread %<name>(%<name>_thread, NULL, %<nThreadPriority>, %<nStackSize>);

    %if valTiming > 0
      RtosTimer %<name>_timer(%<name>_callback, osTimerPeriodic, NULL);
    %endif
    %closefile declbuf

    %<LibAddSourceFileCustomSection(ertMainFile,"Declarations","Ert_main_loc_decl")>
    %<LibSetSourceFileCustomSection(ertMainFile,"Ert_main_loc_decl",declbuf)>

    %if valTiming > 0
      %openfile buff
      /* %<Type> block: %<Name> */    
      %<name>_timer.start(%<valTiming>);
      %closefile buff

      %<LibAddSourceFileCustomSection(ertMainFile,"Declarations","Ert_main_after_init")>
      %<LibSetSourceFileCustomSection(ertMainFile,"Ert_main_after_init",buff)>
    %endif

    %openfile declbuf
    /* %<Type> block: %<Name> */
    void %<name>_thread(void const *argument) {

    %if valTiming > 0
    %<name>_id = Thread::gettid();
    %endif

      while(1) {
      %if valTiming > 0
        Thread::signal_wait(0x1,osWaitForever);
      %endif
        %<LibBlockExecuteFcnCall(block,0)>
      }
    }
    %closefile declbuf

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Functions", declbuf)>

    %if valTiming > 0
      %openfile declbuf
      osThreadId %<name>_id;
      %closefile declbuf

      %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>
    %endif
  %endif

%endfunction
