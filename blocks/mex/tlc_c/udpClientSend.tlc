%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2018 Dr.O.Hagendorf , HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%implements udpClientSend "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()

    %assign sock_id       = FEVAL("int2str",LibBlockParameterValue(sock_ID,0))
    %assign nBufferBytes  = CAST("Number",SFcnParamSettings.NBUFFERBYTES)
    %assign nInputs       = LibBlockNumInputPorts(block)

    %openfile declbuf
    // %<Type> (udpClientSend): '%<Name>'
    char udpClientSendBuffer_%<sock_id>[%<nBufferBytes>] = {'\0'};
    %closefile declbuf 

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

  %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()

    %openfile declbuf
    // %<Type> (udpClientSend): '%<Name>'
    #ifndef UDPCLIENTSEND_CNVT
    #define UDPCLIENTSEND_CNVT
    uint8_t convertsingle2uint8(float x, uint8_t idx) {
      return ((uint8_t*)(&x))[idx];
    }

    uint8_t convertdouble2uint8(double x, uint8_t idx) {
      return ((uint8_t*)(&x))[idx];
    }
    #endif
    %closefile declbuf 

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

    %assign rollVars = ["U", "Y"]
    %assign nBuffer  =  CAST("Number",SFcnParamSettings.NBUFFERBYTES-1)
    %assign nInputs  = LibBlockNumInputPorts(block)-1
    %assign Buffidx  = 0
    %assign rolling  = [0: %<nInputs>]
  
    %assign sock_id       = FEVAL("int2str",LibBlockParameterValue(sock_ID,0))
  
    %%collect input signals and send them via UDP
    // %<Type> (udpClientSend): '%<Name>'

    %roll sigIdx = rolling, lcv = RollThreshold, block, "Roller", rollVars
      %switch LibBlockInputSignalDataTypeId(sigIdx)
        %% double
        %case 0
          %assign u = LibBlockInputSignal(sigIdx, "", lcv,sigIdx)
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = convertdouble2uint8(%<u>, 0); // double
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = convertdouble2uint8(%<u>, 1);
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = convertdouble2uint8(%<u>, 2);
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = convertdouble2uint8(%<u>, 3);
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = convertdouble2uint8(%<u>, 4);
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = convertdouble2uint8(%<u>, 5);
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = convertdouble2uint8(%<u>, 6);
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = convertdouble2uint8(%<u>, 7);
          %assign Buffidx = Buffidx + 1
        %break

        %% single
        %case 1
          %assign u = LibBlockInputSignal(sigIdx, "", lcv,sigIdx)
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = convertsingle2uint8(%<u>, 0); // single
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = convertsingle2uint8(%<u>, 1);
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = convertsingle2uint8(%<u>, 2);
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = convertsingle2uint8(%<u>, 3);
          %assign Buffidx = Buffidx + 1
        %break

        %% int8
        %case 2
          %assign u = LibBlockInputSignal(sigIdx, "", lcv,sigIdx)
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = %<u>; // int8
          %assign Buffidx = Buffidx + 1
        %break

        %% uint8
        %case 3
          %assign u = LibBlockInputSignal(sigIdx, "", lcv,sigIdx)
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = (uint8_t)%<u>; // uint8
          %assign Buffidx = Buffidx + 1
        %break

        %% int16
        %case 4
          %assign u = LibBlockInputSignal(sigIdx, "", lcv,sigIdx)
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = (uint8_t)(%<u> & 0x00ff); // int16
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = (uint8_t)((%<u> & 0xff00) >> 8);
          %assign Buffidx = Buffidx + 1
        %break

        %% uint16
        %case 5
          %assign u = LibBlockInputSignal(sigIdx, "", lcv,sigIdx)
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = (uint8_t)(%<u> & 0x00ff); // uint16
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = (uint8_t)((%<u> & 0xff00) >> 8);
          %assign Buffidx = Buffidx + 1
        %break

        %% int32
        %case 6
          %assign u = LibBlockInputSignal(sigIdx, "", lcv,sigIdx)
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = (uint8_t)(%<u> & 0x00ff); // int32
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = (uint8_t)((%<u> & 0xff00) >> 8);
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = (uint8_t)((%<u> & 0xff0000) >> 16);
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = (uint8_t)((%<u> & 0xff000000) >> 24);
          %assign Buffidx = Buffidx + 1
        %break

        %% uint32
        %case 7
          %assign u = LibBlockInputSignal(sigIdx, "", lcv,sigIdx)
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = (uint8_t)(%<u> & 0x00ff); // uint32
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = (uint8_t)((%<u> & 0xff00) >> 8);
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = (uint8_t)((%<u> & 0xff0000) >> 16);
          %assign Buffidx = Buffidx + 1
          udpClientSendBuffer_%<sock_id>[%<Buffidx>] = (uint8_t)((%<u> & 0xff000000) >> 24);
          %assign Buffidx = Buffidx + 1
        %break

        %default
        %break
      %endswitch
    %endroll
    %%send the data
    %if %<::vSerialDebugInfo>==0
      oUDPSocket_%<sock_id>.sendto(udpConfigSocketIPAddr_%<sock_id>, udpConfigSocketIPPort_%<sock_id>, udpClientSendBuffer_%<sock_id>, %<nBuffer>);
    %else
      int retsend_%<sock_id> = oUDPSocket_%<sock_id>.sendto(udpConfigSocketIPAddr_%<sock_id>, udpConfigSocketIPPort_%<sock_id>, udpClientSendBuffer_%<sock_id>, %<nBuffer>);
      printf("udp sendto ret: %d\n", retsend_%<sock_id>);
    %endif
  %endif
%endfunction