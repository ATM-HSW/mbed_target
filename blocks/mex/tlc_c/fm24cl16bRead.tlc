%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2017 Dr.O.Hagendorf , HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%% File : fm24cl16bRead.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2014 Axel Utech, HS Wismar
%% Copyright 2014-2017 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements fm24cl16bRead "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

  %<LibAddToCommonIncludes("fm24cl16b.h")>

  %assign ::FM24CL16B_instances  = CAST("Number",0)

%endfunction


%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()

    %assign i2cport_val = CAST("Number",LibBlockParameterValue(I2cPort, 0))
    %assign i2c_name = "i2c" + FEVAL("int2str",%<i2cport_val>)
    %assign name = FEVAL("strrep",FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_"), " ", "_")

    %if !(::FM24CL16B_instances == 1)
      %openfile declbuf

      FM24CL16B fm24cl16b(&%<i2c_name>);

      %closefile declbuf
      %assign srcFile = LibGetModelDotCFile()
      %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

      %assign ::FM24CL16B_instances = 1
    %endif

  %endif
%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()

    %assign enableerror_val = CAST("Number",LibBlockParameterValue(EnableError, 0))

    %if enableerror_val == 1
      %<LibBlockOutputSignal(1, "", "", 0)> = fm24cl16b.read_byte(%<LibBlockInputSignal(0, "", "", 0)>, %<LibBlockOutputSignalAddr(0, "", "", 0)>);
    %else
      fm24cl16b.read_byte(%<LibBlockInputSignal(0, "", "", 0)>, %<LibBlockOutputSignalAddr(0, "", "", 0)>);
    %endif

  %endif
%endfunction
