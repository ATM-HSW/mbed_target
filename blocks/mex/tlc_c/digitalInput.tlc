%% File : sfunar_digitalInput.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2016 Dr.O.Hagendorf, HS Wismar

%implements digitalInput "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction


%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup(block, system) void

  %<LibBlockSetIsExpressionCompliant(block)>

%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()
    %assign nPortName = LibBlockParameterValue(PortName, 0)
    %assign nPinNumber = LibBlockParameterValue(PinNumber, 0)
    %assign pname = "P" + FEVAL("char",nPortName+64) + "_" + FEVAL("int2str",nPinNumber-1)

    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
    %assign name = FEVAL("strrep",name,"-","_")

    %openfile declbuf
    DigitalIn %<name>(%<pname>);
    %closefile declbuf

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

    %assign nInputMode = LibBlockParameterValue(InputMode, 0)
    %% PullDefault, PullUp, PullDown, PullNone
    %switch(nInputMode)
      %case 1
        %<name>.mode(PullDefault);
        %break
      %case 2
        %<name>.mode(PullUp);
        %break
      %case 3
        %<name>.mode(PullDown);
        %break
      %case 4
        %<name>.mode(PullNone);
        %break
      %default
        %<name>.mode(PullDefault);
        %break
    %endswitch
  %endif
%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()
    %if !LibBlockOutputSignalIsExpr(0)
      %assign y1_val = LibBlockOutputSignal(0, "", "", 0)

      %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
      %assign name = FEVAL("strrep",name," ","_")
      %assign name = FEVAL("strrep",name,"-","_")
      %%
      %<y1_val> = %<name>;
      %%
    %endif 
  %endif
%endfunction


%% Function: BlockOutputSignal ============================================
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %assign retVal = 0U

  %if !SLibCodeGenForSim()
    %switch retType
      %case "Signal"
        %assign y1_val = LibBlockOutputSignal(0, "", "", 0)

        %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
        %assign name = FEVAL("strrep",name," ","_")
        %assign name = FEVAL("strrep",name,"-","_")
        %%
        %assign retVal =  "%<name>"
        %%
        %break
      %default
        %assign errTxt = "Unsupported return type: %<retType>"
        %<LibBlockReportError(block,errTxt)>
        %break
    %endswitch
  %endif
  %return retVal
%endfunction

