%% File : sfunar_datalogger.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 Dr.O.Hagendorf, HS Wismar

%implements sfunar_DataloggerSDCard "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

  %<LibAddToCommonIncludes("SDFileSystem.h")>
  
%%  %<LibAddToModelSources("ccsbcs")>
%%  %<LibAddToModelSources("diskio")>
%%  %<LibAddToModelSources("FATDirHandle")>
%%  %<LibAddToModelSources("FATFileHandle")>
%%  %<LibAddToModelSources("FATFileSystem")>
%%  %<LibAddToModelSources("ff")>
%%  %<LibAddToModelSources("SDFileSystem")>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  %assign port_val  = LibBlockParameterValue(mosi_port, 0)
  %assign pin_val   = LibBlockParameterValue(mosi_pin, 0)
  %assign mosi_name = "P" + FEVAL("char",port_val+64) + "_" + FEVAL("int2str",pin_val-1)
  %assign port_val  = LibBlockParameterValue(miso_port, 0)
  %assign pin_val   = LibBlockParameterValue(miso_pin, 0)
  %assign miso_name = "P" + FEVAL("char",port_val+64) + "_" + FEVAL("int2str",pin_val-1)
  %assign port_val  = LibBlockParameterValue(sclk_port, 0)
  %assign pin_val   = LibBlockParameterValue(sclk_pin, 0)
  %assign sclk_name = "P" + FEVAL("char",port_val+64) + "_" + FEVAL("int2str",pin_val-1)
  %assign port_val  = LibBlockParameterValue(cs_port, 0)
  %assign pin_val   = LibBlockParameterValue(cs_pin, 0)
  %assign cs_name   = "P" + FEVAL("char",port_val+64) + "_" + FEVAL("int2str",pin_val-1)
  %assign buffersize_val = CAST("Number",LibBlockParameterValue(buffer_size, 0))

  %openfile declbuf
  #define BUF_LEN %<buffersize_val>
  char buffer[BUF_LEN];
  int buf_idx=0;
  //SDFileSystem sd(PC_3, PC_2, PB_10, PE_2, "sd"); // MOSI, MISO, SCK, CS
  SDFileSystem sd(%<mosi_name>, %<miso_name>, %<sclk_name>, %<cs_name>, "sd"); // MOSI, MISO, SCK, CS
  FILE *fp;
  %closefile declbuf 

  %assign srcFile = LibGetModelDotCFile()
  %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

  //printf("starting\r\n");
  fp = fopen("/sd/daten.csv", "r");
  if (fp != NULL) {
      fclose(fp);
      remove("/sd/daten.csv");
      //printf("Remove an existing file with the same name\r\n");
  }

  fp = fopen("/sd/daten.csv", "w");
  if (fp == NULL) {
      //printf("Unable to write the file\r\n");
  }
%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output

  %if !SLibCodeGenForSim()
    %assign nInputs  = LibBlockNumInputPorts(block)
    %assign rolling = [0: %<nInputs>]
    %assign blockid = 1

    %assign rollVars = ["U"]
    buf_idx = 0;
    %assign start = 0
    %foreach port = nInputs
        %assign inputportwidth = LibBlockInputSignalWidth(port)
        %foreach signal = inputportwidth
            %assign u = LibBlockInputSignal(port, "", "", signal)
            %assign datatype = LibBlockInputSignalDataTypeName(port, tRealPart)
            // %<datatype>;
            %if ISEQUAL(start, 1)
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, ",");
            %else
                %assign start = 1
            %endif
            %switch datatype
              %case "uint8_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%hu", %<u>);
                %break
              %case "int8_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%hd", %<u>);
                %break
              %case "uint16_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%u", %<u>);
                %break
              %case "int16_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%u", %<u>);
                %break
              %case "uint32_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%lu", %<u>);
                %break
              %case "int32_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%lu", %<u>);
                %break
              %case "real32_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%f", %<u>);
                %break
              %case "real_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%lf", %<u>);
              %break
              %case "boolean_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, %<u>?"1":"0" );
              %break
              %default
                %break
            %endswitch

        %endforeach
    %endforeach
    //printf("%s\r\n", buffer);
    fp = fopen("/sd/daten.csv", "a");
    if (fp != NULL) {
      fprintf(fp, "%s\r\n", buffer);
      //sd.disk_sync();
      fclose(fp);
    } //else
      //printf("Unable to write the file\r\n");

    %assign errEn_val = CAST("Number",LibBlockParameterValue(errEn, 0))
    %if errEn_val
      %assign y = LibBlockOutputSignal(0, "", "", 0)
      if (BUF_LEN<buf_idx)
        %<y> = 0;
      else
        %<y> = 1;
    %endif

  %endif
%endfunction

