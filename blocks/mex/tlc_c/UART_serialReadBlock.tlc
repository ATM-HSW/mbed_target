%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2017 Dr.O.Hagendorf , HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%% File : sfunar_serialReadBlock.tlc
%%
%% Copyright 2010-2011 The MathWorks, Inc.
%% Copyright 2014-2018 Dr.O.Hagendorf, HS Wismar

%implements UART_serialReadBlock "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()
    %assign buffersize_val = CAST("Number",LibBlockParameterValue(BufferSize, 0))

    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
    %assign name = FEVAL("strrep",name,"-","_")

    %assign SerialPort_val = LibBlockParameterValue(SerialPort,0)
    %assign serportname = "serial" + FEVAL("int2str",SerialPort_val-1)

    %openfile declbuf
    // %<Type> (UART_serialReadBlock): '%<Name>'
    #define %<name>BUF_LEN %<buffersize_val>
    uint8_t %<name>buffer[%<name>BUF_LEN];
    uint8_t %<name>buffer00[%<name>BUF_LEN];
    uint8_t %<name>NewData = 0;

    event_callback_t %<name>serialEventCb;
    %closefile declbuf 

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

    %openfile declbuf
    // %<Type> (UART_serialReadBlock): '%<Name>'
    // interrupt sevice routine to handle the asynch i/o
    void %<name>serialCb(int events) {
        %<serportname>.read(%<name>buffer, %<name>BUF_LEN, %<name>serialEventCb, SERIAL_EVENT_RX_COMPLETE);
        %<name>NewData = 1;
    }
    %closefile declbuf

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Functions", declbuf)>

    // async i/o callback handle
    %<name>serialEventCb = %<name>serialCb;

    // buffer init
    for(int idx=0; idx<%<name>BUF_LEN; idx++) %<name>buffer[idx]   = 0;
    for(int idx=0; idx<%<name>BUF_LEN; idx++) %<name>buffer00[idx] = 0;

    // start async read
    %<serportname>.read(%<name>buffer, %<name>BUF_LEN, %<name>serialEventCb, SERIAL_EVENT_RX_COMPLETE);
  %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()

    %assign newport_val = CAST("Number",LibBlockParameterValue(NewDataPort, 0))
    %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
    %if newport_val
      %assign y2_val = LibBlockOutputSignal(1, "", "", 0)
    %endif
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign SerialPort_val = LibBlockParameterValue(SerialPort,0)
    %assign serportname = "serial" + FEVAL("int2str",SerialPort_val-1)

    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
    %assign name = FEVAL("strrep",name,"-","_")

    #if DEVICE_SERIAL_ASYNCH
    %if newport_val
      if (%<name>NewData) {
        memcpy(%<y1_ptr>, %<name>buffer, %<name>BUF_LEN);
        %<y2_val> = 1;
        %<name>NewData = 0;
      } else {
        %<y2_val> = 0;
      }
    %else
      if (%<name>NewData) {
        memcpy(%<y1_ptr>, %<name>buffer, %<name>BUF_LEN);
        %<name>NewData = 0;
      } else {
        memcpy(%<y1_ptr>, %<name>buffer00, %<name>BUF_LEN);
      }
    %endif
    #else
      #error no DEVICE_SERIAL_ASYNCH defined
    #endif

  %endif
%endfunction
