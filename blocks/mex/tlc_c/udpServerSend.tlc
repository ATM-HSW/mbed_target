%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2017 Dr.O.Hagendorf , HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%implements udpServerSend "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output

  %if !SLibCodeGenForSim()

      %assign sock_id       = SFcnParamSettings.SOCK_ID
      %assign des_ip        = SFcnParamSettings.DES_IP
      %assign srv_port      = CAST("Number",SFcnParamSettings.SRV_PORT)
      %assign nBufferBytes  = CAST("Number",SFcnParamSettings.NBUFFERBYTES)
      %assign nInputs       = LibBlockNumInputPorts(block)

      %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
      %assign name = FEVAL("strrep",name," ","_")
      %assign name = FEVAL("strrep",name,"-","_")
      %%assign pname = "P" + FEVAL("char",p2_val+64) + "_" + FEVAL("int2str",p1_val-1)
      
      %%openfile incbuf
       %%#include "EhternetInterface.h"
        
        %%user defined LwIP options
        %% we need to edit the Headerfile, because LwIP use it in other soucre files
      %%closefile incbuf

      %openfile declbuf
       %%nBufferBytes wird als Flieﬂkomma interpretiert!!!!!!
      char Send_Buffer_%<sock_id>[%<nBufferBytes>] = {'\0'};
      %closefile declbuf 

      %assign srcFile = LibGetModelDotCFile()
      %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>
      
  %endif

  %if !SLibCodeGenForSim()
  %endif

%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output

%assign rollVars = ["U", "Y"]
%assign nBuffer =  CAST("Number",SFcnParamSettings.NBUFFERBYTES)
%assign nInputs       = LibBlockNumInputPorts(block)-1
%assign Buffidx = 0
%assign rolling = [0: %<nInputs>]

%assign sock_id = SFcnParamSettings.SOCK_ID

%assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
%assign name = FEVAL("strrep",name," ","_")
%assign name = FEVAL("strrep",name,"-","_")

%%collect input signals and send them via UDP
  %roll sigIdx = rolling, lcv = RollThreshold, block, "Roller", rollVars
    %switch LibBlockInputSignalDataTypeId(sigIdx)
      %% uint8
      %case 3
        %assign u = LibBlockInputSignal(0, "", lcv,sigIdx)
        Send_Buffer_%<sock_id>[%<Buffidx>] = %<u>;
        %assign Buffidx = Buffidx + 1
      %break
      %%uint16
      %case 5
        %assign u = LibBlockInputSignal(0, "", lcv,sigIdx)
        Send_Buffer_%<sock_id>[%<Buffidx>] = %<u>&0x00ff;
        %assign Buffidx = Buffidx + 1
        Send_Buffer_%<sock_id>[%<Buffidx>] = %<u>&0xff00)>> 8;
        %assign Buffidx = Buffidx + 1
      %break
      %%uint32
      %case 7
        %assign u = LibBlockInputSignal(0, "", lcv,sigIdx)
        Send_Buffer_%<sock_id>[%<Buffidx>] = %<u> & 0x00ff;
        %assign Buffidx = Buffidx + 1
        Send_Buffer_%<sock_id>[%<Buffidx>] = (%<u> & 0xff00) >> 8;
        %assign Buffidx = Buffidx + 1
        Send_Buffer_%<sock_id>[%<Buffidx>] = (%<u> & 0xff0000) >> 16;
        %assign Buffidx = Buffidx + 1
        Send_Buffer_%<sock_id>[%<Buffidx>] = (%<u> & 0xff000000) >> 32;
        %assign Buffidx = Buffidx + 1
      %break
      %default
      %break
    %endswitch
%endroll
%%send the data
    %<name>_%<sock_id>.sendto(Endpoint_%<sock_id>,Send_Buffer_%<sock_id>,%<nBuffer>);
%endfunction