%% File : sfunar_encoderInput.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements timerEncoderInput "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output

  %assign TimerNumber_val = CAST("Number",LibBlockParameterValue(p1, 0))
  %assign EncoderMode_val = CAST("Number",LibBlockParameterValue(p2, 0))
  %assign Ti1Port_val = CAST("Number",LibBlockParameterValue(p3, 0))
  %assign Ti1Pin_val = CAST("Number",LibBlockParameterValue(p4, 0))-1
  %assign Ti2Port_val = CAST("Number",LibBlockParameterValue(p5, 0))
  %assign Ti2Pin_val = CAST("Number",LibBlockParameterValue(p6, 0))-1
  %assign InputMode_val = CAST("Number",LibBlockParameterValue(p7, 0))
  %assign Resolution_val = CAST("Number",LibBlockParameterValue(p8, 0))

  %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
  %assign name = FEVAL("strrep",name," ","_")

    %switch(EncoderMode_val)
        %case 1
            %assign encodermode = "TIM_ENCODERMODE_TI1"
            %break
        %case 2
            %assign encodermode = "TIM_ENCODERMODE_TI2"
            %break
        %case 3
            %assign encodermode = "TIM_ENCODERMODE_TI12"
            %break
        %default
            %assign encodermode = "TIM_ENCODERMODE_TI1"
            %break
    %endswitch

    %switch(InputMode_val)
        %case 1
            %assign pulltype = "GPIO_NOPULL"
            %break
        %case 2
            %assign pulltype = "GPIO_PULLUP"
            %break
        %case 3
            %assign pulltype = "GPIO_PULLDOWN"
            %break
        %default
            %assign pulltype = "GPIO_NOPULL"
            %break
    %endswitch

    %switch Ti1Port_val
        %case 1
            %assign ti1gpio_name = "GPIOA"
            %break
        %case 2
            %assign ti1gpio_name = "GPIOB"
            %break
        %case 3
            %assign ti1gpio_name = "GPIOC"
            %break
        %case 4
            %assign ti1gpio_name = "GPIOD"
            %break
        %case 5
            %assign ti1gpio_name = "GPIOE"
            %break
        %case 6
            %assign ti1gpio_name = "GPIOF"
            %break
    %endswitch

    %switch Ti2Port_val
        %case 1
            %assign ti2gpio_name = "GPIOA"
            %break
        %case 2
            %assign ti2gpio_name = "GPIOB"
            %break
        %case 3
            %assign ti2gpio_name = "GPIOC"
            %break
        %case 4
            %assign ti2gpio_name = "GPIOD"
            %break
        %case 5
            %assign ti2gpio_name = "GPIOE"
            %break
        %case 6
            %assign ti2gpio_name = "GPIOF"
            %break
    %endswitch


    %if ISEQUAL(MbedTarget,"DISCO_F407VG") || ISEQUAL(MbedTarget,"DISCO_F429ZI_168MHz") || ISEQUAL(MbedTarget,"DISCO_F429ZI_180MHz") || ISEQUAL(MbedTarget, "NUCLEO_F446RE") || ISEQUAL(MbedTarget, "STAMP_F446RE") || ISEQUAL(MbedTarget, "NUCLEO_F401RE") || ISEQUAL(MbedTarget, "NUCLEO_F411RE") || 	ISEQUAL(MbedTarget,"DISCO_F746NG")
  
        %switch(TimerNumber_val)
            %case 1
                %assign timer_name = "TIM1" 
                %% TI1 and TI2 alternate function             
                %assign ti1_alternate_function = "GPIO_AF1_TIM1"
                %assign ti2_alternate_function = "GPIO_AF1_TIM1"
                %break
            %case 2
                %assign timer_name = "TIM2"
                %% TI1 and TI2 alternate function
                %assign ti1_alternate_function = "GPIO_AF1_TIM2"
                %assign ti2_alternate_function = "GPIO_AF1_TIM2"
                %break
            %case 3
                %assign timer_name = "TIM3"
                %% TI1 and TI2 alternate function
                %assign ti1_alternate_function = "GPIO_AF2_TIM3"
                %assign ti2_alternate_function = "GPIO_AF2_TIM3"
                %break
            %case 4
                %assign timer_name = "TIM4"
                %% TI1 and TI2 alternate function
                %assign ti1_alternate_function = "GPIO_AF2_TIM4"
                %assign ti2_alternate_function = "GPIO_AF2_TIM4"
                %break
            %case 5
                %assign timer_name = "TIM8"
                %% TI1 and TI2 alternate function
                %assign ti1_alternate_function = "GPIO_AF3_TIM8"
                %assign ti2_alternate_function = "GPIO_AF3_TIM8"
                %break
            %default
                %<LibReportFatalError("Timer Peripheral not supported for Encoder Mode")>
                %break
        %endswitch	

    %elseif ISEQUAL(MbedTarget, "NUCLEO_F303RE")

        %switch(TimerNumber_val)
            %case 1
                %assign timer_name = "TIM1"
                %% TI1 alternate function
                %if ISEQUAL(ti1gpio_name,"GPIOA") && (Ti1Pin_val==8)
                    %assign ti1_alternate_function = "GPIO_AF6_TIM1"
                %elseif ISEQUAL(ti1gpio_name,"GPIOC") && (Ti1Pin_val==0)
                    %assign ti1_alternate_function = "GPIO_AF2_TIM1"
                %elseif ISEQUAL(ti1gpio_name,"GPIOE") && (Ti1Pin_val==9)
                    %assign ti1_alternate_function = "GPIO_AF2_TIM1"
                %endif
                %% TI2 alternate function
                %if ISEQUAL(ti2gpio_name,"GPIOA") && (Ti2Pin_val==9)
                    %assign ti2_alternate_function = "GPIO_AF6_TIM1"
                %elseif ISEQUAL(ti2gpio_name,"GPIOC") && (Ti2Pin_val==1)
                    %assign ti2_alternate_function = "GPIO_AF2_TIM1"
                %elseif ISEQUAL(ti2gpio_name,"GPIOE") && (Ti2Pin_val==11)
                    %assign ti2_alternate_function = "GPIO_AF2_TIM1"
                %endif
                %break
            %case 3
                %assign timer_name = "TIM3"
                %% TI1 alternate function
                %if ISEQUAL(ti1gpio_name,"GPIOA") && (Ti1Pin_val==6)
                    %assign ti1_alternate_function = "GPIO_AF2_TIM3"
                %elseif ISEQUAL(ti1gpio_name,"GPIOB") && (Ti1Pin_val==4)
                    %assign ti1_alternate_function = "GPIO_AF2_TIM3"
                %elseif ISEQUAL(ti1gpio_name,"GPIOC") && (Ti1Pin_val==6)
                    %assign ti1_alternate_function = "GPIO_AF2_TIM3"
                %elseif ISEQUAL(ti1gpio_name,"GPIOE") && (Ti1Pin_val==2)
                    %assign ti1_alternate_function = "GPIO_AF2_TIM3"
                %endif
                %% TI2 alternate function
                %if ISEQUAL(ti2gpio_name,"GPIOA") && (Ti2Pin_val==4)
                    %assign ti2_alternate_function = "GPIO_AF2_TIM3"
                %elseif ISEQUAL(ti2gpio_name,"GPIOA") && (Ti2Pin_val==7)
                    %assign ti2_alternate_function = "GPIO_AF2_TIM3"
                %elseif ISEQUAL(ti2gpio_name,"GPIOB") && (Ti2Pin_val==5)
                    %assign ti2_alternate_function = "GPIO_AF2_TIM3"
                %elseif ISEQUAL(ti2gpio_name,"GPIOC") && (Ti2Pin_val==7)
                    %assign ti2_alternate_function = "GPIO_AF2_TIM3"
                %elseif ISEQUAL(ti2gpio_name,"GPIOE") && (Ti2Pin_val==3)
                    %assign ti2_alternate_function = "GPIO_AF2_TIM3"
                %endif
                %break
            %case 4
                %assign timer_name = "TIM4"
                %% TI1 alternate function
                %if ISEQUAL(ti1gpio_name,"GPIOB") && (Ti1Pin_val==6)
                    %assign ti1_alternate_function = "GPIO_AF2_TIM4"
                %elseif ISEQUAL(ti1gpio_name,"GPIOD") && (Ti1Pin_val==12)
                    %assign ti1_alternate_function = "GPIO_AF2_TIM4"
                %elseif ISEQUAL(ti1gpio_name,"GPIOA") && (Ti1Pin_val==11)
                    %assign ti1_alternate_function = "GPIO_AF10_TIM4"
                %endif
                %% TI2 alternate function
                %if ISEQUAL(ti2gpio_name,"GPIOB") && (Ti2Pin_val==7)
                    %assign ti2_alternate_function = "GPIO_AF2_TIM4"
                %elseif ISEQUAL(ti2gpio_name,"GPIOD") && (Ti2Pin_val==13)
                    %assign ti2_alternate_function = "GPIO_AF2_TIM4"
                %elseif ISEQUAL(ti2gpio_name,"GPIOA") && (Ti2Pin_val==12)
                    %assign ti2_alternate_function = "GPIO_AF10_TIM4"
                %endif
                %break
            %case 5
                %assign timer_name = "TIM8"
                %% TI1 alternate function
                %if ISEQUAL(ti1gpio_name,"GPIOA") && (Ti1Pin_val==15)
                    %assign ti1_alternate_function = "GPIO_AF2_TIM8"
                %elseif ISEQUAL(ti1gpio_name,"GPIOC") && (Ti1Pin_val==6)
                    %assign ti1_alternate_function = "GPIO_AF4_TIM8"
                %elseif ISEQUAL(ti1gpio_name,"GPIOB") && (Ti1Pin_val==6)
                    %assign ti1_alternate_function = "GPIO_AF5_TIM8"
                %endif
                %% TI2 alternate function
                %if ISEQUAL(ti2gpio_name,"GPIOC") && (Ti2Pin_val==7)
                    %assign ti2_alternate_function = "GPIO_AF4_TIM8"
                %elseif ISEQUAL(ti2gpio_name,"GPIOA") && (Ti2Pin_val==14)
                    %assign ti2_alternate_function = "GPIO_AF5_TIM8"
                %elseif ISEQUAL(ti2gpio_name,"GPIOB") && (Ti2Pin_val==8)
                    %assign ti2_alternate_function = "GPIO_AF10_TIM8"
                %endif
                %break
            %default
                %<LibReportFatalError("Timer Peripheral not supported for Encoder Mode")>
                %break
        %endswitch

    %else
        %<LibReportFatalError("Encoder Input Block not supported for this target")>
    %endif

  %if !SLibCodeGenForSim()
    /* %<Type> block: %<Name> */
    TIM_Encoder_InitTypeDef %<name>_sConfig;
    TIM_MasterConfigTypeDef %<name>_sMasterConfig;
    GPIO_InitTypeDef %<name>_GPIO_InitStruct;

    __%<timer_name>_CLK_ENABLE();

    %if ISEQUAL(ti1gpio_name, ti2gpio_name)
        __%<ti1gpio_name>_CLK_ENABLE();
    %else
        __%<ti1gpio_name>_CLK_ENABLE();
        __%<ti2gpio_name>_CLK_ENABLE();
    %endif

    %<name>_GPIO_InitStruct.Pin = GPIO_PIN_%<Ti1Pin_val>;
    %<name>_GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    %<name>_GPIO_InitStruct.Pull = %<pulltype>;
    %<name>_GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
    %<name>_GPIO_InitStruct.Alternate = %<ti1_alternate_function>;
    HAL_GPIO_Init(%<ti1gpio_name>, &%<name>_GPIO_InitStruct);

    %<name>_GPIO_InitStruct.Pin = GPIO_PIN_%<Ti2Pin_val>;
    %<name>_GPIO_InitStruct.Alternate = %<ti2_alternate_function>;
    HAL_GPIO_Init(%<ti2gpio_name>, &%<name>_GPIO_InitStruct);

    %<name>.Instance = %<timer_name>;

    %<name>.Instance = %<timer_name>;
    %<name>.Init.Prescaler = 0;
    %<name>.Init.CounterMode = TIM_COUNTERMODE_UP;
    %<name>.Init.Period = %<Resolution_val>;
    %<name>.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    %<name>.Init.RepetitionCounter = 0;
    %<name>_sConfig.EncoderMode = %<encodermode>;
    %<name>_sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
    %<name>_sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
    %<name>_sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
    %<name>_sConfig.IC1Filter = 0;
    %<name>_sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
    %<name>_sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
    %<name>_sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
    %<name>_sConfig.IC2Filter = 0;
    HAL_TIM_Encoder_Init(&%<name>, &%<name>_sConfig);

    %<name>_sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    %<name>_sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    HAL_TIMEx_MasterConfigSynchronization(&%<name>, &%<name>_sMasterConfig);

    HAL_TIM_Encoder_Start(&%<name>,TIM_CHANNEL_ALL);
    %%
  %endif


  %if !SLibCodeGenForSim()
      %openfile declbuf

      TIM_HandleTypeDef %<name>;

      %closefile declbuf
      %assign srcFile = LibGetModelDotCFile()
      %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>
  %endif

%endfunction


%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output

    %assign u1_val = LibBlockInputSignal(0, "", "", 0)
    %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
    %assign y2_val = LibBlockOutputSignal(1, "", "", 0)

    %assign Resolution_val = CAST("Real",LibBlockParameterValue(p8, 0))

    %assign anglePerTick = 360/Resolution_val
    %%assign anglePerTick = 6.2831853/Resolution_val %%in rad

    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
    %%
    %if !SLibCodeGenForSim()
        if(%<u1_val>) {
            __HAL_TIM_SetCounter(&%<name>, 0);
        }

        %<y2_val> = __HAL_TIM_GetCounter(&%<name>);
        %<y1_val> = %<y2_val>*%<anglePerTick>;
    %endif
%endfunction
