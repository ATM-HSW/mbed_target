%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2018 Dr.O.Hagendorf , HS Wismar
%%                     2018 E.Warnicke, HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%% File : CANSend.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2017 E.Warnicke, HS Wismar
%% Copyright 2017 Dr.O.Hagendorf, HS Wismar

%implements MQTT_pub "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()

    %assign nBuffer = FEVAL("int2str",LibBlockParameterValue(BufferSize,0))
    %openfile declbuf
    // %<Type> (MQTT_pub): '%<Name>'
    MQTT::Message pub_message;
    char mqttPubBuf[%<nBuffer>];
    %closefile declbuf

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

  %endif
%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()

    %assign u1_ptr = LibBlockInputSignalAddr(0,"","",0)
    %assign u1_width =LibBlockInputSignalWidth(0)

    %assign topic = "\""+LibBlockParameterString(MQTT_topic)+"\""
    %assign nBuffer = FEVAL("int2str",LibBlockParameterValue(BufferSize,0))

    %assign enNumberOfBytes = LibBlockParameterValue(NumDataPort,0)
    %if enNumberOfBytes
      %assign number_of_bytes = LibBlockInputSignal(1, "", "", 0)
    %else
      %assign number_of_bytes = %<LibBlockInputSignalWidth(0)>
    %endif
    
    memcpy(mqttPubBuf, %<u1_ptr>, %<u1_width><%<nBuffer>?%<u1_width>:%<nBuffer>);

    pub_message.payload = mqttPubBuf;
    pub_message.payloadlen = %<u1_width><%<nBuffer>?%<u1_width>:%<nBuffer>;
    pub_message.qos = MQTT::QOS0;
    pub_message.retained = false;
    if(Client->isConnected()) {
      %if %<::vSerialDebugInfo>==0
        Client->publish(%<topic>, pub_message);
      %else
        retmqtt = Client->publish(%<topic>, pub_message);
        printf("MQTT publish: %d\n", retmqtt);
      %endif
    }

  %endif
%endfunction
