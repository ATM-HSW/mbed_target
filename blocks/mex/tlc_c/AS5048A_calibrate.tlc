%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2017 Dr.O.Hagendorf , HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%% File : AS5048A_calibrate.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2014-2016 Dr.O.Hagendorf, HS Wismar

%implements AS5048A_calibrate "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void
  
  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()

    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
    %assign name = FEVAL("strrep",name,"-","_")

    %openfile declbuf
        int compare_function(const void *a,const void *b) {
            int *x = (int *) a;
            int *y = (int *) b;
            return *x - *y;
        }

        void calibrate(){
            wait_ms(3000);
            int pollP;
            for(int i=0;i<11;i++){
                for(int steps=1;steps<7;steps++){
                    //wait_ms(2);
                    run(steps,100);//in Schleife durchschalten aller 6x11 positionen 
                    pollP=0;
                    wait_ms(2);
                    //run(0,100);
                    while(1){//pollen auf neuen Positionswert
                        if(pollP==dutyT)break;
                        if(!myled)pollP=dutyT;
                        //wait_ms(5);
                    }	
                    //printf("dutycycle: %d",dutyT);
                    //fflush(stdout);
                    wait_ms(2);

                    switch(steps){//position einem step zuordnen
                        case 1: is_step1[i]=dutyT;break;
                        case 2: is_step2[i]=dutyT;break;
                        case 3: is_step3[i]=dutyT;break;
                        case 4: is_step4[i]=dutyT;break;
                        case 5: is_step5[i]=dutyT;break;
                        case 6: is_step6[i]=dutyT;break;
                    }
                }		
            }
            qsort(is_step1,11,sizeof(int),compare_function);
            qsort(is_step2,11,sizeof(int),compare_function);
            qsort(is_step3,11,sizeof(int),compare_function);
            qsort(is_step4,11,sizeof(int),compare_function);
            qsort(is_step5,11,sizeof(int),compare_function);
            qsort(is_step6,11,sizeof(int),compare_function);
	
            for(int i=0;i<11;i++){
                //printf("Matrix der gemessenen Positionen: %d %d %d %d %d %d \r\n", is_step1[i],is_step2[i],is_step3[i],is_step4[i],is_step5[i],is_step6[i] );
            }
            run(0,100);
            calibrated=1;

        }	
    %closefile declbuf
    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Functions", declbuf)>

    %%
    calibrate();
    %% %<name>.baud(%<BaudRate_val>);
    %%

  %endif
%endfunction
