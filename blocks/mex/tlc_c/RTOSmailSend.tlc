%% File : sfunar_encoderInput.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015-16 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements RTOSmailSend "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()

    %assign valMailNumber = CAST("Number",LibBlockParameterValue(MailNumber, 0))
    %assign valDataType = LibBlockParameterValue(DataType, 0)
    %assign valNumElements = CAST("Number",LibBlockParameterValue(NumElements, 0))
    %assign Depth_val = CAST("Number",LibBlockParameterValue(Depth, 0))

    %switch valDataType
      %case 1
        %assign type = "real_T"
        %break
      %case 2
        %assign type = "real32_T"
        %break
      %case 3
        %assign type = "int8_T"
        %break
      %case 4
        %assign type = "uint8_T"
        %break
      %case 5
        %assign type = "int16_T"
        %break
      %case 6
        %assign type = "uint16_T"
        %break
      %case 7
        %assign type = "int32_T"
        %break
      %case 8
        %assign type = "uint32_T"
        %break
    %endswitch

    %assign srcFile = LibGetModelDotCFile()

    %openfile declbuf
    typedef %<type> mail%<valMailNumber>_T[%<valNumElements>];
    %closefile declbuf

    %<LibSetSourceFileSection(srcFile, "IntrinsicTypes", declbuf)>


    %openfile declbuf
    Mail<mail%<valMailNumber>_T,%<Depth_val>> mail_box%<valMailNumber>;
    %closefile declbuf

    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>
  %endif


%endfunction


%% Function: Outputs ========================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()

    %assign valMailNumber = CAST("Number",LibBlockParameterValue(MailNumber, 0))
    %assign valDataType = LibBlockParameterValue(DataType, 0)
    %assign valNumElements = CAST("Number",LibBlockParameterValue(NumElements, 0))

    %switch valDataType
      %case 1
        %assign type = "real_T"
        %assign len = 8*valNumElements
        %break
      %case 2
        %assign type = "real32_T"
        %assign len = 4*valNumElements
        %break
      %case 3
        %assign type = "int8_T"
        %assign len = 1*valNumElements
        %break
      %case 4
        %assign type = "uint8_T"
        %assign len = 1*valNumElements
        %break
      %case 5
        %assign type = "int16_T"
        %assign len = 2*valNumElements
        %break
      %case 6
        %assign type = "uint16_T"
        %assign len = 2*valNumElements
        %break
      %case 7
        %assign type = "int32_T"
        %assign len = 4*valNumElements
        %break
      %case 8
        %assign type = "uint32_T"
        %assign len = 4*valNumElements
        %break
    %endswitch

    %assign u_ptr = LibBlockInputSignalAddr(0, "", "", 0)

    mail%<valMailNumber>_T *mail = mail_box%<valMailNumber>.alloc();
    memcpy(mail, %<u_ptr>, %<len>);
    mail_box%<valMailNumber>.put(mail);
  %endif

%endfunction