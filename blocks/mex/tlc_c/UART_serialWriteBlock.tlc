%% File : sfunar_serialWrite.tlc
%%
%% Copyright 2010-2011 The MathWorks, Inc.
%% Copyright 2014-2016 Dr.O.Hagendorf, HS Wismar

%implements UART_serialWriteBlock "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

    %% Ensure required header files are included
    %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()
    %assign SerialPort_val = LibBlockParameterValue(SerialPort,0)
    %assign nameSerial = "serial" + FEVAL("int2str",SerialPort_val-1)

    %assign enNumberOfBytes_val = LibBlockParameterValue(enNumberOfBytes,0)

    %if enNumberOfBytes_val
        %assign number_of_bytes = LibBlockInputSignal(1, "", "", 0)
    %else
        %assign number_of_bytes = %<LibBlockInputSignalWidth(0)>
    %endif

    %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)

    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
    %assign name = FEVAL("strrep",name,"-","_")

    %%
    #if DEVICE_SERIAL_ASYNCH
    %<name>.write((const char*)%<u1_ptr>, %<number_of_bytes>, 0, 0);

    #else
    const char* ptr%<name> = (const char*)%<u1_ptr>;
    const char* end%<name> = ptr%<name> + %<number_of_bytes>;
    while (ptr%<name> != end%<name>) {
        if (%<nameSerial>.putc(*ptr%<name>++) == EOF) {
            break;
        }
    }
    #endif
    %%
  %endif
%endfunction
