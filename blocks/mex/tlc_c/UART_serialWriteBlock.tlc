%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2020 Dr.O.Hagendorf , HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%% File : sfunar_serialWrite.tlc
%%
%% Copyright 2010-2011 The MathWorks, Inc.
%% Copyright 2014-2016 Dr.O.Hagendorf, HS Wismar

%implements UART_serialWriteBlock "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

    %% Ensure required header files are included
    %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()
    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
    %assign name = FEVAL("strrep",name,"-","_")

    %assign SerialPort_val = LibBlockParameterValue(SerialPort,0)
    %assign serportname = "serial" + FEVAL("int2str",SerialPort_val-1)

    %openfile declbuf
    // %<Type> (UART_serialWriteBlock): '%<Name>'
    event_callback_t %<name>serialTXEventCb;
    %closefile declbuf

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

    %openfile declbuf
    // %<Type> (UART_serialWriteBlock): '%<Name>'
    // interrupt sevice routine to handle the asynch i/o
    void %<name>serialTXCb(int events) {
    #if DEVICE_SERIAL_ASYNCH
      %<serportname>.abort_write();
    #endif
    }
    %closefile declbuf

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Functions", declbuf)>

    // async i/o callback handle
    %<name>serialTXEventCb = %<name>serialTXCb;
  %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()
    %assign SerialPort_val = LibBlockParameterValue(SerialPort,0)
    %assign serportname = "serial" + FEVAL("int2str",SerialPort_val-1)

    %assign enNumberOfBytes_val = LibBlockParameterValue(enNumberOfBytes,0)

    %if enNumberOfBytes_val
        %assign number_of_bytes = LibBlockInputSignal(1, "", "", 0)
    %else
        %assign number_of_bytes = %<LibBlockInputSignalWidth(0)>
    %endif

    %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)

    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
    %assign name = FEVAL("strrep",name,"-","_")

    %%
    #if DEVICE_SERIAL_ASYNCH
    %<serportname>.write((const uint8_t*)%<u1_ptr>, %<number_of_bytes>, %<name>serialTXEventCb, SERIAL_EVENT_TX_COMPLETE);
    #else
    const char* ptr%<name> = (const char*)%<u1_ptr>;
    const char* end%<name> = ptr%<name> + %<number_of_bytes>;
    while (ptr%<name> != end%<name>) {
      if (%<serportname>.putc(*ptr%<name>++) == EOF) {
        break;
      }
    }
    #endif
    %%
  %endif
%endfunction
