%%  MbedTarget Simulink target
%%  Copyright (c) 2018 Dr.O.Hagendorf, HS Wismar
%%                2018 Yi-Chen Hsu, HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%implements coapRequestPut "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

  %<LibAddToCommonIncludes("<string>")>
  %<LibAddToCommonIncludes("<stdlib.h>")>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()

  %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()

    %%assign PATH  = SFcnParamSettings.Path
    %assign PATH = LibBlockParameterString(Path)
    %assign TOKEN = FEVAL("int2str",LibBlockParameterValue(Token, 0))
    %assign Input = LibBlockInputSignal(0, "", "", 0)

    const char* coap_uri_path_%<TOKEN> ="%<PATH>";
    uint16_t token_%<TOKEN>= %<TOKEN> ;
    uint16_t ID_%<TOKEN>=(rand() % 60000) +1 ;

    uint8_t Input_%<TOKEN>= %<Input>;
    char Input_char_%<TOKEN>[3];
    char *Input_char_pointer_%<TOKEN>;  

    Input_char_%<TOKEN>[0]= '0' + Input_%<TOKEN>/100;
    Input_char_%<TOKEN>[1]= '0' + (Input_%<TOKEN>%100)/10;
    Input_char_%<TOKEN>[2]= '0' + (Input_%<TOKEN>%100)%10;
    Input_char_pointer_%<TOKEN>= &Input_char_%<TOKEN>[0];

    // See ns_coap_header.h
    sn_coap_hdr_s *coap_res_ptr_%<TOKEN> = (sn_coap_hdr_s*)calloc(sizeof(sn_coap_hdr_s), 1);
    coap_res_ptr_%<TOKEN>->uri_path_ptr = (uint8_t*)coap_uri_path_%<TOKEN>;       // Path
    coap_res_ptr_%<TOKEN>->uri_path_len = strlen(coap_uri_path_%<TOKEN>);         //Path length
    coap_res_ptr_%<TOKEN>->msg_code = COAP_MSG_CODE_REQUEST_PUT;                  // CoAP method
    coap_res_ptr_%<TOKEN>->content_format = COAP_CT_TEXT_PLAIN;                   // CoAP content type
    coap_res_ptr_%<TOKEN>->payload_len = 3;                                       // Body length
    coap_res_ptr_%<TOKEN>->payload_ptr = (uint8_t*) Input_char_pointer_%<TOKEN>;
    coap_res_ptr_%<TOKEN>->options_list_ptr = 0;                                  // Optional: options list
    coap_res_ptr_%<TOKEN>->msg_id = ID_%<TOKEN>++;
    coap_res_ptr_%<TOKEN>->token_len=sizeof(token_%<TOKEN>);
    coap_res_ptr_%<TOKEN>->token_ptr=(uint8_t*)&token_%<TOKEN>;

    // Calculate the CoAP message size, allocate the memory and build the message
    uint16_t message_len_%<TOKEN> = sn_coap_builder_calc_needed_packet_data_size(coap_res_ptr_%<TOKEN>);

    uint8_t* message_ptr_%<TOKEN> = (uint8_t*)malloc(message_len_%<TOKEN>);
    sn_coap_builder(message_ptr_%<TOKEN>, coap_res_ptr_%<TOKEN>);

    nsapi_size_or_error_t ret_%<TOKEN>;

    ret_%<TOKEN>=socket.sendto(hostIP, 5683, message_ptr_%<TOKEN>, message_len_%<TOKEN>);
    %if %<::vSerialDebugInfo>==0
      printf("Message is sent out %d bytes\n", ret_%<TOKEN>);
    %endif

    free(coap_res_ptr_%<TOKEN>);
    free(message_ptr_%<TOKEN>);

    recv[token_%<TOKEN> -1]=0;

 %endif
%endfunction