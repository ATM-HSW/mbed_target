%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2017 Dr.O.Hagendorf , HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%% File : tmp102.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2014-2017 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar


%implements tmp102 "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

  %<LibAddToCommonIncludes("tmp102.h")>

%endfunction


%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup(block, system) void
  %%
%%  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()

    %assign i2cport_val = CAST("Number",LibBlockParameterValue(I2cPort, 0))
    %assign subaddress_val = CAST("Number",LibBlockParameterValue(SubAddress, 0))-1
    %assign samplerate_val = CAST("Number",LibBlockParameterValue(SampleRate, 0))-1
    %assign i2c_name = "i2c" + FEVAL("int2str",%<i2cport_val>)

    %openfile declbuf
    TMP102 tmp102_%<subaddress_val>(&%<i2c_name>, %<subaddress_val>);
    %closefile declbuf

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

    %if samplerate_val == 4
      tmp102_%<subaddress_val>.configure(TMP102_SHUTDOWN, TMP102_COMPARATOR, TMP102_13BIT, TMP102_RATE_4HZ);
    %else
      tmp102_%<subaddress_val>.configure(TMP102_CONTINUOUS, TMP102_COMPARATOR, TMP102_13BIT, %<samplerate_val>);
    %endif

  %endif
%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()

    %assign subaddress_val = CAST("Number",LibBlockParameterValue(SubAddress, 0))-1
    %assign y1_addr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign enableerror_val = LibBlockParameterValue(EnableError, 0)

    %if enableerror_val == 1
      %<LibBlockOutputSignal(1, "", "", 0)> = tmp102_%<subaddress_val>.get_temp(%<y1_addr>);
    %else
      tmp102_%<subaddress_val>.get_temp(%<y1_addr>);
    %endif
  %endif
%endfunction
