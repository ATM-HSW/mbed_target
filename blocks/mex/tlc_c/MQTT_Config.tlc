%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2018 Dr.O.Hagendorf , HS Wismar
%%                     2018 E.Warnicke, HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%% File : CANConfig.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2017 E.Warnicke, HS Wismar
%% Copyright 2017 Dr.O.Hagendorf, HS Wismar

%implements MQTT_Config "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

  %<LibAddToCommonIncludes("EthernetInterface.h")>
  %<LibAddToCommonIncludes("MQTTNetwork.h")>
  %<LibAddToCommonIncludes("MQTTSocket.h")>
  %<LibAddToCommonIncludes("MQTTmbed.h")>
  %<LibAddToCommonIncludes("MQTTClient.h")>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()

    %assign hostname = "\""+LibBlockParameterString(broker_ip)+"\""
    %assign port = CAST("Number",LibBlockParameterValue(broker_port,0))

    %openfile declbuf
    // %<Type> (MQTT_Config): '%<Name>'
    //#define MQTTCLIENT_QOS2 1

    MQTTNetwork *mqttNetwork;
    MQTTSocket *mqttIPStack;
    //MQTT::Client<MQTTNetwork, Countdown>* Client;
    MQTT::Client<MQTTSocket, Countdown>* Client;
    %if %<::vSerialDebugInfo>!=0
    int retmqtt;
    %endif
    %closefile declbuf

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

    // %<Type> (MQTT_Config): '%<Name>'
    //mqttNetwork = new MQTTNetwork(&net);
    //Client = new MQTT::Client<MQTTNetwork, Countdown>(*mqttNetwork);

    mqttIPStack = new MQTTSocket(&net);
    Client = new MQTT::Client<MQTTSocket, Countdown>(*mqttIPStack);

    %if %<::vSerialDebugInfo>==0
      //mqttNetwork->connect(%<hostname>, %<port>);
      mqttIPStack->connect(%<hostname>, %<port>);
    %else
      //retmqtt = mqttNetwork->connect(%<hostname>, %<port>);
      retmqtt = mqttIPStack->connect(%<hostname>, %<port>);
      printf("MQTT network connect: %d\r\n", retmqtt);
    %endif

    MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    data.MQTTVersion = 3;
    data.clientID.cstring = "mbed-sample";
    data.username.cstring = "testuser";
    data.password.cstring = "testpassword";

    %if %<::vSerialDebugInfo>==0
      Client->connect(data);
    %else
      retmqtt = Client->connect(data);
      printf("MQTT client connect: %d\n", retmqtt);
    %endif

%endif
%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()
    %if %<::vSerialDebugInfo>==0
      Client->yield(0);
    %else
      retmqtt = Client->yield(0);
      //printf("MQTT client yield: %d\n", retmqtt);
    %endif
  %endif
%endfunction