%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2017 Dr.O.Hagendorf , HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%% File : CANConfig.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2017 E.Warnicke, HS Wismar
%% Copyright 2017 Dr.O.Hagendorf, HS Wismar

%implements MQTT_Config "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()
    %assign hostname = "\""+LibBlockParameterString(broker_ip)+"\""
    %assign port = CAST("Number",LibBlockParameterValue(broker_port,0))

    %openfile declbuf
    // %<Type> (MQTT_Config): '%<Name>'
    #define MQTTCLIENT_QOS2 1

    NetworkInterface* network = NULL;
    EthernetInterface eth;
    MQTT::Client<MQTTNetwork, Countdown>* Client;
    int rc;
    int connected=0;
    Serial pc(USBTX, USBRX);
    %closefile declbuf

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>
    %<LibAddToCommonIncludes("EthernetInterface.h")>
    %<LibAddToCommonIncludes("MQTTNetwork.h")>
    %<LibAddToCommonIncludes("MQTTmbed.h")>
    %<LibAddToCommonIncludes("MQTTClient.h")>

    // %<Type> (MQTT_Config): '%<Name>'
    pc.printf("Hello MQTT Version 0.6");
    eth.set_dhcp(false);
    eth.set_network("192.168.0.105","255.255.255.0","192.168.0.1");
    network = &eth;
    //eth.connect();
    if((eth.connect())<0)printf("eth connect error");
    fflush(stdout);
    connected++;
	const char *ip_addr  = network->get_ip_address();
	pc.printf("IP address %s\n", ip_addr);
    if (!network) {
        printf("network NULL\r\n");
    }

    MQTTNetwork mqttNetwork(network);
    MQTT::Client<MQTTNetwork, Countdown> client(mqttNetwork);
    Client=&client;

    rc=mqttNetwork.connect(%<hostname>, %<port>);
    if (rc != 0)printf("rc from TCP connect is %d\r\n", rc);
    fflush(stdout);
    connected++;
    //MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    rc=Client->connect(/*data*/);
    if(rc!=0)printf("rc from MQTT connect is %d\r\n", rc);
    fflush(stdout);
    connected++;
%endif

%endfunction
