%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2017 Dr.O.Hagendorf , HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%% File : RTOScreateTimer.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015-16 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements RTOScreateTimer "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()

    %assign valThreadPriority = LibBlockParameterValue(ThreadPriority, 0) %% Priority
    %assign valStackOption = LibBlockParameterValue(StackOption, 0) %% StackOption
    %assign valStackSize = CAST("Number",LibBlockParameterValue(StackSize, 0)) %% Stacksize
    %assign valTiming = CAST("Number",LibBlockParameterValue(Timing, 0))  %% Timing
  
    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
    %assign name = FEVAL("strrep",name,"-","_")
  
    %switch(valThreadPriority)
      %case(1)
          %assign nThreadPriority = "osPriorityIdle"
          %break
      %case(2)
          %assign nThreadPriority = "osPriorityLow"
          %break
      %case(3)
          %assign nThreadPriority = "osPriorityBelowNormal"
          %break
      %case(4)
          %assign nThreadPriority = "osPriorityNormal"
          %break
      %case(5)
          %assign nThreadPriority = "osPriorityAboveNormal"
          %break
      %case(6)
          %assign nThreadPriority = "osPriorityHigh"
          %break
      %case(7)
          %assign nThreadPriority = "osPriorityRealtime"
          %break
      %default
          %assign nThreadPriority = "osPriorityNormal"
    %endswitch
  
    %if valStackOption == 1
      %assign nStackSize = "DEFAULT_STACK_SIZE"
    %else
      %assign nStackSize = valStackSize
    %endif

    %assign ertMainFile = LibCreateSourceFile("Source", "Custom", "ert_main")

    %openfile declbuf
    // %<Type> (RTOScreateTimer): '%<Name>'
    extern void %<name>_thread();
    extern osThreadId %<name>_id;
    %closefile declbuf

    %<LibAddSourceFileCustomSection(ertMainFile,"Declarations","Ert_main_glob_decl")>
    %<LibSetSourceFileCustomSection(ertMainFile,"Ert_main_glob_decl",declbuf)>

    %openfile declbuf
    // %<Type> (RTOScreateTimer): '%<Name>'
    void %<name>_callback()
    {
      osSignalSet(%<name>_id, 0x1);
    }
    %closefile declbuf
    %<LibAddSourceFileCustomSection(ertMainFile,"Declarations","Ert_main_fcn_decl")>
    %<LibSetSourceFileCustomSection(ertMainFile,"Ert_main_fcn_decl",declbuf)>

    %openfile declbuf
    // %<Type> (RTOScreateTimer): '%<Name>'
    Thread %<name>(%<nThreadPriority>, %<nStackSize>);
    %<name>.start(callback(%<name>_thread));
    RtosTimer %<name>_timer(callback(%<name>_callback), osTimerPeriodic);
    %closefile declbuf

    %<LibAddSourceFileCustomSection(ertMainFile,"Declarations","Ert_main_loc_decl")>
    %<LibSetSourceFileCustomSection(ertMainFile,"Ert_main_loc_decl",declbuf)>

    %openfile buff
    // %<Type> (RTOScreateTimer): '%<Name>'
    %<name>_timer.start(%<valTiming>);
    %closefile buff

    %<LibAddSourceFileCustomSection(ertMainFile,"Declarations","Ert_main_after_init")>
    %<LibSetSourceFileCustomSection(ertMainFile,"Ert_main_after_init",buff)>

    %openfile declbuf
    // %<Type> (RTOScreateTimer): '%<Name>'
    void %<name>_thread() {
      %<name>_id = Thread::gettid();

      while(1) {
        Thread::signal_wait(0x1,osWaitForever);
        %<LibBlockExecuteFcnCall(block,0)>
      }
    }
    %closefile declbuf

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Functions", declbuf)>

    %openfile declbuf
    // %<Type> (RTOScreateTimer): '%<Name>'
    osThreadId %<name>_id;
    %closefile declbuf

    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

  %endif
%endfunction
