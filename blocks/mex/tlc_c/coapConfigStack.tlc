%%  MbedTarget Simulink target
%%  Copyright (c) 2018 Dr.O.Hagendorf, HS Wismar
%%                2018 Yi-Chen Hsu, HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%implements coapConfigStack "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

  %<LibAddToCommonIncludes("sn_nsdl.h")>
  %<LibAddToCommonIncludes("sn_coap_protocol.h")>
  %<LibAddToCommonIncludes("sn_coap_header.h")>
  %<LibAddToCommonIncludes("EthernetInterface.h")>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output

  %if !SLibCodeGenForSim()

    %assign ip =      SFcnParamSettings.IP

    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
    %assign name = FEVAL("strrep",name,"-","_")

    %%Add Ethernet things to the includes
    %openfile declbuf

    EthernetInterface net;
    UDPSocket socket;           // Socket to talk CoAP over
    Thread recvfromThread;      // Thread to receive messages over CoAP
    uint8_t recv[4];
    uint8_t recvvalue[4];
	char hostIP[] = "%<ip>"; 

    struct coap_s* coapHandle;
    coap_version_e coapVersion = COAP_VERSION_1;

    // CoAP HAL
    void* coap_malloc(uint16_t size) {
      return malloc(size);
    }

    void coap_free(void* addr) {
      free(addr);
    }
 
    // tx_cb and rx_cb are not used in this program
    uint8_t coap_tx_cb(uint8_t *a, uint16_t b, sn_nsdl_addr_s *c, void *d) {
        printf("coap tx cb\n");
        return 0;
    }
     
    int8_t coap_rx_cb(sn_coap_hdr_s *a, sn_nsdl_addr_s *b, void *c) {
        printf("coap rx cb\n");
        return 0;
    }

    // Recieve Thread
    void recvfromMain() {
      uint8_t idx, value, token_len;
      uint16_t msg_id, token;
      SocketAddress addr;
      uint8_t* recv_buffer = (uint8_t*)malloc(1280); // Suggested is to keep packet size under 1280 bytes
      nsapi_size_or_error_t ret;
      sn_coap_hdr_s* parsed;

      while(1) {
        if ((ret = socket.recvfrom(&addr, recv_buffer, 1280)) >= 0) {
          // to see where the message came from, inspect addr.get_addr() and addr.get_port()
          printf("Received a message of length '%d'\n", ret);
          
          parsed = sn_coap_parser(coapHandle, ret, recv_buffer, &coapVersion);
           
          msg_id = parsed->msg_id;
          token = (uint16_t)parsed->token_ptr[0];
          value = (uint8_t)(parsed->payload_ptr[0])-'0';
          token_len = parsed->token_len;
		
		  printf("Value: %d\n", value) ;

          sn_coap_parser_release_allocated_coap_msg_mem(coapHandle, parsed);
          
          printf("\tmsg_id:           %d\n", msg_id);
          printf("\tpayload:          %d\n", value);
          printf("\ttokenlen:         %d\n", token_len);
          printf("\ttoken:            %d\n", token);

          switch(token) {
		    	case 1:
              printf(" Recieved from Token1\n");
              idx=0;
              break;
            case 2:
              printf(" Recieved from Token2\n");
              idx=1;
              break;
          	case 3:
              printf(" Recieved from Token3\n");
              idx=2;
              break;
          	case 4:
              printf(" Recieved from Token4\n");
              idx=3;
              break;
            default:
	            idx=0;
	            break;
          }
          recv[idx]= 1;
          recvvalue[idx]=value;

          printf(" The Recv Array: ");
          for(int i = 0; i < 4; i++) {
            printf("%d ", recv[i]);
          } 
          printf("\n");
          printf("The Value Array: ");
          for(int i = 0; i < 4; i++) {
            printf("%d ", recvvalue[i]);
          } 
          printf("\n");
        } else {
          printf("UDPSocket::recvfrom failed, error code %d. Shutting down receive thread.\n", ret);
        }
      }
    }
    %closefile declbuf

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

  %endif

  %if !SLibCodeGenForSim()
  %% Main Function
  
    if(0 != net.connect()) {
        printf("Error connecting\n");
      }
    printf("Connected to the network....\n");

   // Open a socket on the network interface
     socket.open(&net);

    // Initialize the CoAP protocol handle, pointing to local implementations on malloc/free/tx/rx functions
    coapHandle = sn_coap_protocol_init(&coap_malloc, &coap_free, &coap_tx_cb, &coap_rx_cb);

   //UDPSocket::recvfrom is blocking, so run it in a separate RTOS thread
  recvfromThread.start(&recvfromMain);

  %endif

%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output

%endfunction