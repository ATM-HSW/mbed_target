%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 L. Schl√ºter, HS Wismar

%implements sfunar_mi0283qtWrite "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

  %<LibAddToCommonIncludes("cmd.h")>
  %<LibAddToCommonIncludes("lcd_scope.h")>
  %<LibAddToCommonIncludes("mi0283qt.h")>
  
  %<LibAddToModelSources("mi0283qt")>
  %<LibAddToModelSources("lcd_scope")>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  %assign spi_port_val = LibBlockParameterValue(spi_port,0)

  %assign cs_port_val = LibBlockParameterValue(cs_port,0)
  %assign cs_pin_val = LibBlockParameterValue(cs_pin,0)
  %assign cs_name = "P" + FEVAL("char",cs_port_val+64) + "_" + FEVAL("int2str",cs_pin_val-1)

  %assign rst_port_val = LibBlockParameterValue(rst_port,0)
  %assign rst_pin_val = LibBlockParameterValue(rst_pin,0)
  %assign rst_name = "P" + FEVAL("char",rst_port_val+64) + "_" + FEVAL("int2str",rst_pin_val-1)

  %if !SLibCodeGenForSim()
    %openfile declbuf
    %%
    #define SPI_MODE      3
    #define SPI_INTERFACE_DEFINED
    DigitalOut cs_mi0283qt(%<cs_name>);
    DigitalOut rst_mi0283qt(%<rst_name>);
    %%
    %closefile declbuf
    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

    %%
    spi%<spi_port_val>.format(MI0283QT_FRAME_SIZE, SPI_MODE);
    %%

    %% Display Initialisierung
    lcd_init(spi%<spi_port_val>, cs_mi0283qt, rst_mi0283qt);
  %endif

  %if !SLibCodeGenForSim()
    uint16_t signalNumber_mi0283qt;

    %assign timeRange = LibBlockParameterValue(range,0)
    %assign minValue = LibBlockParameterValue(min,0)
    %assign maxValue = LibBlockParameterValue(max,0)

    if(%<LibBlockInputSignalWidth(0)> > MAX_SCOPE_VALUE_NUMBER)
    {
      signalNumber_mi0283qt = MAX_SCOPE_VALUE_NUMBER;
    }
    else
    {
      signalNumber_mi0283qt = %<LibBlockInputSignalWidth(0)>;
    }

    lcd_drawScope(spi%<spi_port_val>, cs_mi0283qt, %<timeRange>, %<minValue>, %<maxValue>);
    lcd_drawScopeLegend(spi%<spi_port_val>, cs_mi0283qt, signalNumber_mi0283qt);
  %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs(block, system) Output

  %if !SLibCodeGenForSim()
    uint16_t time;
    uint16_t signalNumber_mi0283qt;

    %assign spi_port_val = LibBlockParameterValue(spi_port,0)

    %assign value = LibBlockInputSignalAddr(0, "", "", 0)
    %assign minValue = LibBlockParameterValue(min,0)
    %assign maxValue = LibBlockParameterValue(max,0)
    %assign stepSize = LibBlockParameterValue(step,0)
    %assign timeRange = LibBlockParameterValue(range,0)

    if(%<LibBlockInputSignalWidth(0)> > MAX_SCOPE_VALUE_NUMBER)
    {
      signalNumber_mi0283qt = MAX_SCOPE_VALUE_NUMBER;
    }
    else
    {
      signalNumber_mi0283qt = %<LibBlockInputSignalWidth(0)>;
    }

    time = calc_Time(%<stepSize>);
    lcd_drawScopeValue(spi%<spi_port_val>, cs_mi0283qt, time, %<value>, %<timeRange>, %<minValue>, %<maxValue>, signalNumber_mi0283qt);
    %%lcd_testScreen(spi%<spi_port_val>, cs_mi0283qt);

  %endif
%endfunction