%% File : sfunar_i2cFram_write.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements sfunar_i2cFram_write "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

  %<LibAddToCommonIncludes("fm24cl16b.h")>
  %<LibAddToModelSources("fm24cl16b")>
  
  %assign ::FM24CL16B_instances  = CAST("Number",0)

%endfunction


%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()
      %assign i2cport_val = CAST("Number",LibBlockParameterValue(I2cPort, 0))
	  
      %assign i2c_name = "i2c" + FEVAL("int2str",%<i2cport_val>)
      %assign name = FEVAL("strrep",FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_"), " ", "_")

	  %if !(::FM24CL16B_instances == 1)
        %openfile declbuf

        FM24CL16B fm24cl16b(&%<i2c_name>);

        %closefile declbuf
        %assign srcFile = LibGetModelDotCFile()
        %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>
		
		%assign ::FM24CL16B_instances = 1
	  %endif
  %endif
%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output

 %assign enableerror_val = CAST("Number",LibBlockParameterValue(EnableError, 0))
 
  %if !SLibCodeGenForSim()

	%if enableerror_val == 1
	  %<LibBlockOutputSignal(0, "", "", 0)> = fm24cl16b.write_byte(%<LibBlockInputSignal(0, "", "", 0)>, %<LibBlockInputSignal(1, "", "", 0)>);
	%else
	  fm24cl16b.write_byte(%<LibBlockInputSignal(0, "", "", 0)>, %<LibBlockInputSignal(1, "", "", 0)>);
	%endif
	
  %endif
%endfunction
