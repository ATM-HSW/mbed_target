%implements udpClientWrite "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output

  %if !SLibCodeGenForSim()

    %assign sock_id       = FEVAL("int2str",LibBlockParameterValue(sock_ID,0))
    %assign nBufferBytes  = CAST("Number",SFcnParamSettings.NBUFFERBYTES)
    %assign nInputs       = LibBlockNumInputPorts(block)

    %openfile declbuf
    %%nBufferBytes wird als Flieﬂkomma interpretiert!!!!!!
    char Send_Buffer_%<sock_id>[%<nBufferBytes>] = {'\0'};
    %closefile declbuf 

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

  %endif

%endfunction

%% Function: Outputs ======================================================
%function Outputs(block, system) Output

  %assign rollVars = ["U", "Y"]
  %assign nBuffer  =  CAST("Number",SFcnParamSettings.NBUFFERBYTES-1)
  %assign nInputs  = LibBlockNumInputPorts(block)-1
  %assign Buffidx  = 0
  %assign rolling  = [0: %<nInputs>]

  %assign sock_id       = FEVAL("int2str",LibBlockParameterValue(sock_ID,0))

  %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
  %assign name = FEVAL("strrep",name," ","_")
  %assign name = FEVAL("strrep",name,"-","_")

  %%collect input signals and send them via UDP
  %roll sigIdx = rolling, lcv = RollThreshold, block, "Roller", rollVars
    %switch LibBlockInputSignalDataTypeId(sigIdx)
      %% uint8
      %case 3
        %assign u = LibBlockInputSignal(0, "", lcv,sigIdx)
        Send_Buffer_%<sock_id>[%<Buffidx>] = %<u>;
        %assign Buffidx = Buffidx + 1
      %break

      %%uint16
      %case 5
        %assign u = LibBlockInputSignal(0, "", lcv,sigIdx)
        (uint16_t)Send_Buffer_%<sock_id>[%<Buffidx>] = %<u>;
        %assign Buffidx = Buffidx + 2
      %break

      %%uint32
      %case 7
        %assign u = LibBlockInputSignal(0, "", lcv,sigIdx)
        Send_Buffer_%<sock_id>[%<Buffidx>] = %<u> & 0x00ff;
        %assign Buffidx = Buffidx + 1
        Send_Buffer_%<sock_id>[%<Buffidx>] = (%<u> & 0xff00) >> 8;
        %assign Buffidx = Buffidx + 1
        Send_Buffer_%<sock_id>[%<Buffidx>] = (%<u> & 0xff0000) >> 16;
        %assign Buffidx = Buffidx + 1
        Send_Buffer_%<sock_id>[%<Buffidx>] = (%<u> & 0xff000000) >> 24;
        %assign Buffidx = Buffidx + 1
      %break

      %default
      %break
    %endswitch
  %endroll
  %%send the data
  oUDPSocket_%<sock_id>.sendTo(oEndpoint_%<sock_id>,Send_Buffer_%<sock_id>,%<nBuffer>);
%endfunction