%%  MbedTarget Simulink target
%%  Copyright (c) 2014-2018 Dr.O.Hagendorf , HS Wismar
%%                     2018 E.Warnicke, HS Wismar
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%      http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.

%% File : CANReceive.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2017 E.Warnicke, HS Wismar
%% Copyright 2017 Dr.O.Hagendorf, HS Wismar

%implements MQTT_sub "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()

    %assign topic ="\""+LibBlockParameterString(MQTT_topic)+"\""
    %assign nBuffer = FEVAL("int2str",LibBlockParameterValue(BufferSize,0))

    %openfile declbuf
    // %<Type> (MQTT_sub): '%<Name>'
    char mqttSubBuf[%<nBuffer>]={0};
    uint16_t mqttSubLen=0;
    %closefile declbuf

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

    %openfile declbuf
    // %<Type> (MQTT_sub): '%<Name>'
    void messageArrived(MQTT::MessageData& md){
        MQTT::Message &message=md.message;
        %if %<::vSerialDebugInfo>!=0
          printf("Message arrived: qos %d, retained %d, dup %d, packetid %d\r\n", message.qos, message.retained, message.dup, message.id);
          printf("Payload %.*s\r\n", message.payloadlen, (char*)message.payload);
        %endif
        mqttSubLen = message.payloadlen<%<nBuffer>?message.payloadlen:%<nBuffer>;
        memcpy(mqttSubBuf, message.payload, mqttSubLen);
    }
    %closefile declbuf

    %<LibSetSourceFileSection(srcFile, "Functions", declbuf)>

    // %<Type> (MQTT_sub): '%<Name>'
    %if %<::vSerialDebugInfo>==0
      Client->subscribe(%<topic>, MQTT::QOS0, messageArrived);
    %else
      retmqtt = Client->subscribe(%<topic>, MQTT::QOS0, messageArrived);
      printf("MQTT subscribe: %d\n", retmqtt);
    %endif

  %endif
%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output
  %if !SLibCodeGenForSim()
    %if !LibBlockOutputSignalIsExpr(0)

      %assign y_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
      %assign msg_len = LibBlockOutputSignal(1, "", "", 0)

      %assign nBuffer = FEVAL("int2str",LibBlockParameterValue(BufferSize,0))

      memcpy(%<y_ptr>, mqttSubBuf, mqttSubLen);
      %<msg_len>=mqttSubLen;

    %endif
  %endif
%endfunction