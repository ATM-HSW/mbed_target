%% File : sfunar_datalogger.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 Dr.O.Hagendorf, HS Wismar

%implements sfunar_datalogger "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  %openfile declbuf
  #define BUF_LEN 100
  char buffer[BUF_LEN];
  int buf_idx=0;
  SDFileSystem sd(D11, D12, D13, D10, "sd"); // MOSI, MISO, SCK, CS
  FILE *fp;
  Serial pc(PC_6,PC_7);
  %closefile declbuf 

  %assign srcFile = LibGetModelDotCFile()
  %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>

  fp = fopen("/sd/hello.txt", "r");
  if (fp != NULL) {
      fclose(fp);
      remove("/sd/hello.txt");
      pc.printf("Remove an existing file with the same name\r\n");
  }

  fp = fopen("/sd/hello.txt", "w");
  if (fp == NULL) {
      pc.printf("Unable to write the file\r\n");
  }
%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output

  %if !SLibCodeGenForSim()
    %assign nInputs  = LibBlockNumInputPorts(block)
    %assign rolling = [0: %<nInputs>]
    %assign blockid = 1

    %assign y = LibBlockOutputSignal(0, "", "", 0)
    %<y> = 0;

    %assign rollVars = ["U"]
    buf_idx = 0;
    %assign start = 0
    %foreach port = nInputs
        %assign inputportwidth = LibBlockInputSignalWidth(port)
        %foreach signal = inputportwidth
            %assign u = LibBlockInputSignal(port, "", "", signal)
            %assign datatype = LibBlockInputSignalDataTypeName(port, tRealPart)
            // %<datatype>;
            %if ISEQUAL(start, 1)
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, ",");
            %else
                %assign start = 1
            %endif
            %switch datatype
              %case "uint8_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%hu", %<u>);
                %break
              %case "int8_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%hd", %<u>);
                %break
              %case "uint16_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%u", %<u>);
                %break
              %case "int16_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%u", %<u>);
                %break
              %case "uint32_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%lu", %<u>);
                %break
              %case "int32_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%lu", %<u>);
                %break
              %case "real32_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%f", %<u>);
                %break
              %case "real_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%lf", %<u>);
              %break
              %case "boolean_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, %<u>?"1":"0" );
              %break
              %default
                %break
            %endswitch

        %endforeach
    %endforeach
    pc.printf("%s\r\n", buffer);
    fprintf(fp, "%s\r\n", buffer);
  %endif
%endfunction

