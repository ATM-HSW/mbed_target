%% File : sfunar_encoderInput.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements sfunar_spiDmaWrite "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>
    
%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output

	%assign SpiPort_val = CAST("Number",LibBlockParameterValue(p1, 0))
	
	%openfile declbuf
		uint8_T spi%<SpiPort_val>_TxBuffer[%<LibBlockInputSignalWidth(0)>];
	%closefile declbuf
	%assign srcFile = LibGetModelDotCFile()
	%<LibSetSourceFileSection(srcFile, "Declarations", declbuf)> 

%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output

    %assign u1_val = LibBlockInputSignalAddr(0, "", "", 0)
	%assign SpiPort_val = CAST("Number",LibBlockParameterValue(p1, 0))
	%assign numData_val = CAST("Number",LibBlockParameterValue(p2, 0))

    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
	
	%if ISEQUAL(MbedTarget,"DISCO_F407VG") || ISEQUAL(MbedTarget, "NUCLEO_F446RE") || ISEQUAL(MbedTarget, "STAMP_F446RE") || ISEQUAL(MbedTarget, "NUCLEO_F401RE") || ISEQUAL(MbedTarget, "NUCLEO_F411RE")
		%switch SpiPort_val
			%case 1
				%assign spi_name = "SPI1"
				%assign tx_dma_stream = "DMA2_Stream3"
				%assign clear_dma_flags = "DMA2->HIFCR = DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7 | DMA_FLAG_FEIF3_7"
				%break
			%case 2
				%assign spi_name = "SPI2"
				%assign tx_dma_stream = "DMA1_Stream4"
				%assign clear_dma_flags = "DMA1->HIFCR = DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4"
				%break		
			%case 3
				%assign spi_name = "SPI3"
				%assign tx_dma_stream = "DMA1_Stream7"
				%assign clear_dma_flags = "DMA1->LIFCR = DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7 | DMA_FLAG_FEIF3_7"
				%break
			%default
				%<LibReportError("This SPI%<SpiPort_val> Peripheral is not supported by this target!")>				
				%break
		%endswitch		
			
		%assign check_dma_enable = "%<tx_dma_stream>->CR & DMA_SxCR_EN"
		%assign dma_mar_access = "%<tx_dma_stream>->M0AR"
		%assign dma_ndtr_access = "%<tx_dma_stream>->NDTR"
		%assign set_dma_enable = "%<tx_dma_stream>->CR |= DMA_SxCR_EN"
		%assign clear_dma_enable = "%<tx_dma_stream>->CR &= ~DMA_SxCR_EN"
		%assign check_spi_transmit_empty = "%<spi_name>->SR & SPI_SR_TXE"
		
	%elseif ISEQUAL(MbedTarget,"DISCO_F429ZI")
		%switch SpiPort_val
			%case 1
				%assign spi_name = "SPI1"
				%assign tx_dma_stream = "DMA2_Stream3"
				%assign clear_dma_flags = "DMA2->LIFCR = DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7 | DMA_FLAG_FEIF3_7"
				%break
			%case 2
				%assign spi_name = "SPI2"
				%assign tx_dma_stream = "DMA1_Stream4"
				%assign clear_dma_flags = "DMA1->HIFCR = DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4"
				%break		
			%case 3
				%assign spi_name = "SPI3"
				%assign tx_dma_stream = "DMA1_Stream7"
				%assign clear_dma_flags = "DMA1->HIFCR = DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7 | DMA_FLAG_FEIF3_7"
				%break	
			%case 4
				%assign spi_name = "SPI4"
				%assign tx_dma_stream = "DMA2_Stream4"
				%assign clear_dma_flags = "DMA2->HIFCR = DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4"
				%break	
			%case 5
				%assign spi_name = "SPI5"
				%assign tx_dma_stream = "DMA2_Stream6"
				%assign clear_dma_flags = "DMA2->HIFCR = DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_FEIF2_6"
				%break
			%default
				%<LibReportError("This SPI%<SpiPort_val> Peripheral is not supported by this target!")>
				%break
		%endswitch		
			
		%assign check_dma_enable = "%<tx_dma_stream>->CR & DMA_SxCR_EN"
		%assign dma_mar_access = "%<tx_dma_stream>->M0AR"
		%assign dma_ndtr_access = "%<tx_dma_stream>->NDTR"
		%assign set_dma_enable = "%<tx_dma_stream>->CR |= DMA_SxCR_EN"
		%assign clear_dma_enable = "%<tx_dma_stream>->CR &= ~DMA_SxCR_EN"
		%assign check_uart_transmit_empty = "%<spi_name>->SR & SPI_SR_TXE"
	
	%elseif ISEQUAL(MbedTarget, "NUCLEO_F303RE")
		%switch SpiPort_val
			%case 1
				%assign spi_name = "SPI1"
				%assign tx_dma_channel = "DMA1_Channel3"
				%assign clear_dma_flags = "DMA1->IFCR = DMA_FLAG_GL3"
				%%assign check_dma_enable = "(DMA1->ISR & DMA_FLAG_TC3)"
				%break
			%case 2
				%assign spi_name = "SPI2"
				%assign tx_dma_channel = "DMA1_Channel5"
				%assign clear_dma_flags = "DMA1->IFCR = DMA_FLAG_GL5"
				%%assign check_dma_enable = "(DMA1->ISR & DMA_FLAG_TC5)"
				%break		
			%case 3
				%assign spi_name = "SPI3"
				%assign tx_dma_channel = "DMA2_Channel2"
				%assign clear_dma_flags = "DMA2->IFCR = DMA_FLAG_GL2"
				%%assign check_dma_enable = "(DMA2->ISR & DMA_FLAG_TC2)"
				%break
			%default
				%<LibReportError("This SPI%<SpiPort_val> Peripheral is not supported by this target!")>
				%break
		%endswitch
		
		%assign check_dma_enable = "%<tx_dma_channel>->CCR & DMA_CCR_EN"
		%assign dma_mar_access = "%<tx_dma_channel>->CMAR"
		%assign dma_ndtr_access = "%<tx_dma_channel>->CNDTR"
		%assign set_dma_enable = "%<tx_dma_channel>->CCR |= DMA_CCR_EN"
		%assign clear_dma_enable = "%<tx_dma_channel>->CCR &= ~DMA_CCR_EN"
		%assign check_spi_transmit_empty = "%<spi_name>->SR & SPI_SR_TXE"
		
	%else
		%<LibReportFatalError("SPI DMA Write Block not supported by this target")>
	%endif	
	
	%if !SLibCodeGenForSim()	
		if(%<check_spi_transmit_empty>)
		{
			if(%<check_dma_enable>){
				%<clear_dma_enable>;
			}		

            %if numData_val == 0		
			memcpy(spi%<SpiPort_val>_TxBuffer, %<u1_val>,  %<LibBlockInputSignalWidth(0)>);
            %else
			memcpy(spi%<SpiPort_val>_TxBuffer, %<u1_val>,  %<LibBlockInputSignal(1, "", "", 0)>);
            %endif

			%<clear_dma_flags>;
			%<dma_mar_access> = (uint32_t)spi%<SpiPort_val>_TxBuffer;
			
            %if numData_val == 0
			%<dma_ndtr_access> = %<LibBlockInputSignalWidth(0)>;
            %else
            %<dma_ndtr_access> = %<LibBlockInputSignal(1, "", "", 0)>;
            %endif

			%<set_dma_enable>; 
		}
	%endif	
%endfunction
