%% File : sfunar_encoderInput.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements sfunar_mailSend "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output

  %assign MailNumber_val = CAST("Number",LibBlockParameterValue(MailNumber, 0))
  %assign DataType_val = LibBlockParameterValue(DataType, 0)
  %assign NumElements_val = CAST("Number",LibBlockParameterValue(NumElements, 0))
  %assign Depth_val = CAST("Number",LibBlockParameterValue(Depth, 0))

  %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
  %assign name = FEVAL("strrep",name," ","_")

  %switch DataType_val
    %case 1
      %assign type = "real_T"
      %break
    %case 2
      %assign type = "real32_T"
      %break
    %case 3
      %assign type = "int8_T"
      %break
    %case 4
      %assign type = "uint8_T"
      %break
    %case 5
      %assign type = "int16_T"
      %break
    %case 6
      %assign type = "uint16_T"
      %break
    %case 7
      %assign type = "int32_T"
      %break
    %case 8
      %assign type = "uint32_T"
      %break
  %endswitch

  %assign srcFile = LibGetModelDotCFile()

  %if !SLibCodeGenForSim()    
    
    %openfile declbuf
      typedef %<type> mail%<MailNumber_val>_T[%<NumElements_val>];
    %closefile declbuf
    %<LibSetSourceFileSection(srcFile, "IntrinsicTypes", declbuf)>

    %openfile declbuf	
      Mail<mail%<MailNumber_val>_T,%<Depth_val>> mail_box%<MailNumber_val>;
    %closefile declbuf	
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>
  %endif


%endfunction


%% Function: Outputs ========================================================
%function Outputs(block, system) Output
  
  %assign MailNumber_val = CAST("Number",LibBlockParameterValue(MailNumber, 0))
  %assign DataType_val = LibBlockParameterValue(DataType, 0)
  %assign NumElements_val = CAST("Number",LibBlockParameterValue(NumElements, 0))

  %switch DataType_val
    %case 1
      %assign type = "real_T"
      %assign len = 8*NumElements_val
      %break
    %case 2
      %assign type = "real32_T"
      %assign len = 4*NumElements_val
      %break
    %case 3
      %assign type = "int8_T"
      %assign len = 1*NumElements_val
      %break
    %case 4
      %assign type = "uint8_T"
      %assign len = 1*NumElements_val
      %break
    %case 5
      %assign type = "int16_T"
      %assign len = 2*NumElements_val
      %break
    %case 6
      %assign type = "uint16_T"
      %assign len = 2*NumElements_val
      %break
    %case 7
      %assign type = "int32_T"
      %assign len = 4*NumElements_val
      %break
    %case 8
      %assign type = "uint32_T"
      %assign len = 4*NumElements_val
      %break
  %endswitch

  %assign u_ptr = LibBlockInputSignalAddr(0, "", "", 0)

  %if !SLibCodeGenForSim()
    mail%<MailNumber_val>_T *mail = mail_box%<MailNumber_val>.alloc();
    memcpy(mail, %<u_ptr>, %<len>);
    mail_box%<MailNumber_val>.put(mail);
  %endif

%endfunction