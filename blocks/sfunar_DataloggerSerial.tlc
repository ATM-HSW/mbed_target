%% File : sfunar_datalogger.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 Dr.O.Hagendorf, HS Wismar

%implements sfunar_DataloggerSerial "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  %if !SLibCodeGenForSim()
    %assign BufferSize = LibBlockParameterValue(block_size,0)
    %openfile declbuf
    #define BUF_LEN %<BufferSize>
    char buffer[BUF_LEN];
    int buf_idx=0;
    %closefile declbuf 

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Declarations", declbuf)>
  %endif
%endfunction


%% Function: Outputs ======================================================
%function Outputs(block, system) Output

  %if !SLibCodeGenForSim()
    %assign nInputs  = LibBlockNumInputPorts(block)
    %assign blockid = 1
    %assign sp_val = LibBlockParameterValue(serial_port,0)
    %assign name = "serial" + FEVAL("int2str",sp_val)

    %assign y = LibBlockOutputSignal(0, "", "", 0)
    %<y> = 0;

    %assign rollVars = ["U"]
    buf_idx = 0;
    %assign start = 0
    %foreach port = nInputs
        %assign inputportwidth = LibBlockInputSignalWidth(port)
        %foreach signal = inputportwidth
            %assign u = LibBlockInputSignal(port, "", "", signal)
            %assign datatype = LibBlockInputSignalDataTypeName(port, tRealPart)
            // %<datatype>;
            %if ISEQUAL(start, 1)
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, ",");
            %else
                %assign start = 1
            %endif
            %switch datatype
              %case "uint8_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%hu", %<u>);
                %break
              %case "int8_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%hd", %<u>);
                %break
              %case "uint16_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%u", %<u>);
                %break
              %case "int16_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%u", %<u>);
                %break
              %case "uint32_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%lu", %<u>);
                %break
              %case "int32_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%lu", %<u>);
                %break
              %case "real32_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%f", %<u>);
                %break
              %case "real_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, "%lf", %<u>);
              %break
              %case "boolean_T"
                buf_idx+=snprintf(buffer+buf_idx, BUF_LEN, %<u>?"1":"0" );
              %break
              %default
                %break
            %endswitch

        %endforeach
    %endforeach
    %<name>.printf("%s\r\n", buffer);
  %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs__(block, system) Output

  %if !SLibCodeGenForSim()
    %assign rollVars = ["U", "Y"]
    %assign nInputs  = LibBlockNumInputPorts(block)-1
    %assign rolling = [0: %<nInputs>]
    %assign blockid = 1 %% CAST("String",SFcnParamSettings.blockid)
  
    %roll sigIdx = rolling, lcv = RollThreshold, block, "Roller", rollVars
      %assign inputportwidth = LibBlockInputSignalWidth(sigIdx)
  
      %switch LibBlockInputSignalDataTypeId(sigIdx)
        %% SS_DOUBLE
        %case 0
          %foreach idx = inputportwidth
            %assign value = LibBlockInputSignal(idx, "", lcv, 0)
            sprintf((char *)&%<blockid>_buffer, "%d,", (%<value>)[%<idx>]);
            %assign value = LibBlockInputSignal(idx, "", lcv, 1)
            sprintf((char *)&%<blockid>_buffer, "%d,", (%<value>)[%<idx>]);
          %endforeach
          %break
  
        %% SS_SINGLE
        %case 1
          %foreach idx = inputportwidth
            %assign value = LibBlockInputSignal(idx, "", lcv, 0)
            sprintf((char *)&%<blockid>_buffer, "%s,", (%<value>)[%<idx>]);
          %endforeach
          %break
  
        %% SS_INT8
        %case 2
          %foreach idx = inputportwidth
            %assign value = LibBlockInputSignal(idx, "", lcv, 0)
            sprintf((char *)&%<blockid>_buffer, "%i8,", (%<value>)[%<idx>]);
          %endforeach
          %break
  
        %% SS_UINT8
        %case 3
          %foreach idx = inputportwidth
            %assign value = LibBlockInputSignal(idx, "", lcv, 0)
            sprintf((char *)&%<blockid>_buffer, "%ui8,", (%<value>)[%<idx>]);
          %endforeach
          %break
  
        %% SS_INT16
        %case 4
          %foreach idx = inputportwidth
            %assign value = LibBlockInputSignal(idx, "", lcv, 0)
            sprintf((char *)&%<blockid>_buffer, "%i16,", (%<value>)[%<idx>]);
          %endforeach
          %break
  
        %% SS_UINT16
        %case 5
          %foreach idx = inputportwidth
            %assign value = LibBlockInputSignal(idx, "", lcv, 0)
            sprintf((char *)&%<blockid>_buffer, "%ui16,", (%<value>)[%<idx>]);
          %endforeach
          %break
  
        %% SS_INT32
        %case 6
          %foreach idx = inputportwidth
            %assign value = LibBlockInputSignal(idx, "", lcv, 0)
            sprintf((char *)&%<blockid>_buffer, "%i32,", (%<value>)[%<idx>]);
          %endforeach
          %break
  
        %% SS_UINT32
        %case 7
          %foreach idx = inputportwidth
            %assign value = LibBlockInputSignal(idx, "", lcv, 0)
            sprintf((char *)&%<blockid>_buffer, "%ui32,", (%<value>)[%<idx>]);
          %endforeach
          %break
  
        %% SS_BOOLEAN
        %case 8
          %foreach idx = inputportwidth
            %assign value = LibBlockInputSignal(idx, "", lcv, 0)
            sprintf((char *)&%<blockid>_buffer, "%b,", (%<value>)[%<idx>]);
          %endforeach
          %break
  
        %default
          %break
      %endswitch
    %endroll
  %endif

%endfunction
