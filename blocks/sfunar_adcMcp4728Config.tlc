%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2014 Dr.O.Hagendorf, HS Wismar
%% MCP4728 Modifications by Axel Utech 2014, HS Wismar

%implements sfunar_adcMcp4728Config "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void
  
  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>

%endfunction


%% Function: Start ========================================================
%function Start(block, system) Output

  %assign p1_val = LibBlockParameterValue(p1,0)

  %if !SLibCodeGenForSim()
    %openfile declbuf
    %%
    #if !defined(I2C_INTERFACE_DEFINED)
        #error "No I2C Interface defined! Add a \"I2C-Config\" Block!"
    #endif

#if defined(MCP4728_ADDR_DEVICE)
    #error "Multiple DAC MCP4728 Config blocks!"
#endif

#define MCP4728_ADDR_DEVICE (%<p1_val>)
#define MCP4728_ADDR (0xC0 | MCP3428_ADDR_DEVICE)

bool mcp4728_setChannel(uint8_t channel, bool UseInternalVRef, uint8_t powerDownMode, bool use2xGain, uint16_t value){
    char buf[3];
    buf[0] = 0x40 | ((channel & 0x3) << 1);
    
    buf[1] = ((uint8_t)UseInternalVRef << 7) | ((powerDownMode & 0x3) << 5) | ((uint8_t)use2xGain << 4);
    buf[1] |= (value & 0x0f00)>>8;
    
    buf[2] = value & 0xff;
    
    return i2c.write(MCP4728_ADDR, buf, 3, 0) == 0;
}

uint16_t mcp4728_valueFromVoltage(double volt, bool UseInternalVRef, bool use2xGain){
	double lsb;
	if(UseInternalVRef){
		if(use2xGain){
			lsb = 4.096 / 4096;
		}else{
			lsb = 2.048 / 4096;
		}
	}else{
		lsb = 3.3 / 4096;
	}
	double res = volt / lsb;
	uint16_t res16 = (uint16_t)(res + 0.5);
	return res16;
}

uint16_t mcp4728_valueFromRelative(double rel){
	double res = rel * 4095;
	uint16_t res16 = (uint16_t)(res + 0.5);
	return res16;
}
    %%
    %closefile declbuf
    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Functions", declbuf)>
    
  %endif
%endfunction
