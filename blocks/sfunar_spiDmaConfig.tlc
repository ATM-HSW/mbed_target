%% File : sfunar_encoderInput.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements sfunar_spiDmaConfig "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>
    
%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  
  %assign SpiPort_val = CAST("Number",LibBlockParameterValue(p1, 0))
  %assign MosiPort_val = CAST("Number",LibBlockParameterValue(p2, 0))
  %assign MosiPin_val = CAST("Number",LibBlockParameterValue(p3, 0))-1
  %assign MisoPort_val = CAST("Number",LibBlockParameterValue(p4, 0))
  %assign MisoPin_val = CAST("Number",LibBlockParameterValue(p5, 0))-1
  %assign SclkPort_val = CAST("Number",LibBlockParameterValue(p6, 0))
  %assign SclkPin_val = CAST("Number",LibBlockParameterValue(p7, 0))-1
  %assign NssPort_val = CAST("Number",LibBlockParameterValue(p8, 0))
  %assign NssPin_val = CAST("Number",LibBlockParameterValue(p9, 0))-1
  %assign SlaveFlag_val = CAST("Number",LibBlockParameterValue(p10, 0))
  %assign Frequency_val = CAST("Number",LibBlockParameterValue(p11, 0))

  
  %assign mosigpio_name = "GPIO" + FEVAL("char",MosiPort_val+64)
  %assign misogpio_name = "GPIO" + FEVAL("char",MisoPort_val+64)
  %assign sclkgpio_name = "GPIO" + FEVAL("char",SclkPort_val+64)
  %assign nssgpio_name = "GPIO" + FEVAL("char",NssPort_val+64)
			
	%switch Frequency_val
		%case 1
			%assign baudrate_presc = "SPI_BAUDRATEPRESCALER_2"
			%break
		%case 2
			%assign baudrate_presc = "SPI_BAUDRATEPRESCALER_4"
			%break
		%case 3
			%assign baudrate_presc = "SPI_BAUDRATEPRESCALER_8"
			%break
		%case 4
			%assign baudrate_presc = "SPI_BAUDRATEPRESCALER_16"
			%break
		%case 5
			%assign baudrate_presc = "SPI_BAUDRATEPRESCALER_32"
			%break
		%case 6
			%assign baudrate_presc = "SPI_BAUDRATEPRESCALER_64"
			%break
		%case 7
			%assign baudrate_presc = "SPI_BAUDRATEPRESCALER_128"
			%break
		%case 8
			%assign baudrate_presc = "SPI_BAUDRATEPRESCALER_256"
			%break
	%endswitch

	%if ISEQUAL(MbedTarget,"DISCO_F407VG") || ISEQUAL(MbedTarget, "NUCLEO_F446RE") || ISEQUAL(MbedTarget, "STAMP_F446RE") || ISEQUAL(MbedTarget, "NUCLEO_F401RE") || ISEQUAL(MbedTarget, "NUCLEO_F411RE")
	
		%switch SpiPort_val
		%case 1
			%assign spi_name = "SPI1"
			%assign dma_name = "DMA2"
			%assign dma_channel = "DMA_CHANNEL_3"
			%assign tx_dma_stream = "DMA2_Stream3"
			%assign rx_dma_stream = "DMA2_Stream2"
			%assign alternate_function = "GPIO_AF5_SPI1"
			%break
		%case 2
			%assign spi_name = "SPI2"
			%assign dma_name = "DMA1"
			%assign dma_channel = "DMA_CHANNEL_0"
			%assign tx_dma_stream = "DMA1_Stream4"
			%assign rx_dma_stream = "DMA1_Stream3"
			%assign alternate_function = "GPIO_AF5_SPI2"
			%break
		%case 3
			%assign spi_name = "SPI3"
			%assign dma_name = "DMA1"
			%assign dma_channel = "DMA_CHANNEL_0"
			%assign tx_dma_stream = "DMA1_Stream7"
			%assign rx_dma_stream = "DMA1_Stream0"
			%assign alternate_function = "GPIO_AF6_SPI3"
			%break
		%default
			%<LibReportError("This SPI%<SpiPort_val> Peripheral is not supported by this target!")>
			%break
		%endswitch 
	
	%elseif ISEQUAL(MbedTarget, "DISCO_F429ZI_168MHz") || ISEQUAL(MbedTarget, "DISCO_F429ZI_180MHz")
		
		%switch SpiPort_val
		%case 1
			%assign spi_name = "SPI1"
			%assign dma_name = "DMA2"
			%assign dma_channel = "DMA_CHANNEL_3"
			%assign tx_dma_stream = "DMA2_Stream3"
			%assign rx_dma_stream = "DMA2_Stream2"
			%assign alternate_function = "GPIO_AF5_SPI1"
			%break
		%case 2
			%assign spi_name = "SPI2"
			%assign dma_name = "DMA1"
			%assign dma_channel = "DMA_CHANNEL_0"
			%assign tx_dma_stream = "DMA1_Stream4"
			%assign rx_dma_stream = "DMA1_Stream3"
			%assign alternate_function = "GPIO_AF5_SPI2"
			%break
		%case 3
			%assign spi_name = "SPI3"
			%assign dma_name = "DMA1"
			%assign dma_channel = "DMA_CHANNEL_0"
			%assign tx_dma_stream = "DMA1_Stream7"
			%assign rx_dma_stream = "DMA1_Stream0"
			%assign alternate_function = "GPIO_AF6_SPI3"
			%break
		%case 4
			%assign spi_name = "SPI4"
			%assign dma_name = "DMA2"
			%assign dma_channel = "DMA_CHANNEL_5"
			%assign tx_dma_stream = "DMA2_Stream4"
			%assign rx_dma_stream = "DMA2_Stream3"
			%assign alternate_function = "GPIO_AF5_SPI4"
			%break
		%case 5
			%assign spi_name = "SPI5"
			%assign dma_name = "DMA2"
			%assign dma_channel = "DMA_CHANNEL_7"
			%assign tx_dma_stream = "DMA2_Stream6"
			%assign rx_dma_stream = "DMA2_Stream5"
			%assign alternate_function = "GPIO_AF5_SPI5"
			%break
		%default
			%<LibReportError("This SPI%<SpiPort_val> Peripheral is not supported by this target!")>
			%break
		%endswitch 
		
	%elseif ISEQUAL(MbedTarget, "DISCO_F746NG")
	
		%switch SpiPort_val
		%case 1
			%assign spi_name = "SPI1"
			%assign dma_name = "DMA2"
			%assign dma_channel = "DMA_CHANNEL_3"
			%assign tx_dma_stream = "DMA2_Stream3"
			%assign rx_dma_stream = "DMA2_Stream2"
			%assign alternate_function = "GPIO_AF5_SPI1"
			%break
		%case 2
			%assign spi_name = "SPI2"
			%assign dma_name = "DMA1"
			%assign dma_channel = "DMA_CHANNEL_0"
			%assign tx_dma_stream = "DMA1_Stream4"
			%assign rx_dma_stream = "DMA1_Stream3"
			%assign alternate_function = "GPIO_AF5_SPI2"
			%break
		%case 3
			%assign spi_name = "SPI3"
			%assign dma_name = "DMA1"
			%assign dma_channel = "DMA_CHANNEL_0"
			%assign tx_dma_stream = "DMA1_Stream7"
			%assign rx_dma_stream = "DMA1_Stream0"
			%assign alternate_function = "GPIO_AF6_SPI3"
			%break
		%case 4
			%assign spi_name = "SPI4"
			%assign dma_name = "DMA2"
			%assign dma_channel = "DMA_CHANNEL_5"
			%assign tx_dma_stream = "DMA2_Stream4"
			%assign rx_dma_stream = "DMA2_Stream3"
			%assign alternate_function = "GPIO_AF5_SPI4"
			%break
		%case 5
			%assign spi_name = "SPI5"
			%assign dma_name = "DMA2"
			%assign dma_channel = "DMA_CHANNEL_7"
			%assign tx_dma_stream = "DMA2_Stream6"
			%assign rx_dma_stream = "DMA2_Stream5"
			%assign alternate_function = "GPIO_AF5_SPI5"
			%break
		%case 6
			%assign spi_name = "SPI6"
			%assign dma_name = "DMA2"
			%assign dma_channel = "DMA_CHANNEL_1"
			%assign tx_dma_stream = "DMA2_Stream5"
			%assign rx_dma_stream = "DMA2_Stream6"
			%assign alternate_function = "GPIO_AF5_SPI6"
			%break
		%default
			%<LibReportError("This SPI%<SpiPort_val> Peripheral is not supported by this target!")>
			%break
		%endswitch 
	
	%elseif ISEQUAL(MbedTarget, "NUCLEO_F303RE")

		%switch SpiPort_val
		%case 1
			%assign spi_name = "SPI1"
			%assign dma_name = "DMA1"
			%assign tx_dma_channel = "DMA1_Channel3"
			%assign rx_dma_channel = "DMA1_Channel2"
			%assign alternate_function = "GPIO_AF5_SPI1"
			%break
		%case 2
			%assign spi_name = "SPI2"
			%assign dma_name = "DMA1"
			%assign tx_dma_channel = "DMA1_Channel5"
			%assign rx_dma_channel = "DMA1_Channel4"
			%assign alternate_function = "GPIO_AF5_SPI2"
			%break
		%case 3
			%assign spi_name = "SPI3"
			%assign dma_name = "DMA2"
			%assign tx_dma_channel = "DMA2_Channel2"
			%assign rx_dma_channel = "DMA2_Channel1"
			%assign alternate_function = "GPIO_AF6_SPI3"
			%break
		%default
			%<LibReportError("This SPI%<SpiPort_val> Peripheral is not supported by this target!")>
			%break
		%endswitch 
	
	%else
		%<LibReportFatalError("SPI DMA Config Block not supported by this target")>
	%endif
	
	%if !SLibCodeGenForSim()
		%openfile buffer
			%% configure MOSI GPIO PIN
			__%<mosigpio_name>_CLK_ENABLE();			
			%<mosigpio_name>->MODER |= (GPIO_MODE_AF_PP << (%<MosiPin_val>*2));
			%<mosigpio_name>->OTYPER &= ~(GPIO_OTYPER_OT_%<MosiPin_val>);
			%<mosigpio_name>->OSPEEDR |= (GPIO_SPEED_MEDIUM << (%<MosiPin_val>*2));
			%<mosigpio_name>->PUPDR &= ~(GPIO_PUPDR_PUPDR%<MosiPin_val>);
			%if MosiPin_val > 7
				%assign MosiPin_val = MosiPin_val - 8
				%<mosigpio_name>->AFR[1] |= (%<alternate_function> << (%<MosiPin_val>*4));
			%else				
				%<mosigpio_name>->AFR[0] |= (%<alternate_function> << (%<MosiPin_val>*4));
			%endif

			%% configure MISO GPIO PIN
			__%<misogpio_name>_CLK_ENABLE();			
			%<misogpio_name>->MODER |= (GPIO_MODE_AF_PP << (%<MisoPin_val>*2));
			%<misogpio_name>->OTYPER &= ~(GPIO_OTYPER_OT_%<MisoPin_val>);
			%<misogpio_name>->OSPEEDR |= (GPIO_SPEED_MEDIUM << (%<MisoPin_val>*2));
			%<misogpio_name>->PUPDR &= ~(GPIO_PUPDR_PUPDR%<MisoPin_val>);
			%if MisoPin_val > 7
				%assign MisoPin_val = MisoPin_val - 8
				%<misogpio_name>->AFR[1] |= (%<alternate_function> << (%<MisoPin_val>*4));
			%else				
				%<misogpio_name>->AFR[0] |= (%<alternate_function> << (%<MisoPin_val>*4));
			%endif
			
			%% configure SCLK GPIO PIN
			__%<sclkgpio_name>_CLK_ENABLE();			
			%<sclkgpio_name>->MODER |= (GPIO_MODE_AF_PP << (%<SclkPin_val>*2));
			%<sclkgpio_name>->OTYPER &= ~(GPIO_OTYPER_OT_%<SclkPin_val>);
			%<sclkgpio_name>->OSPEEDR |= (GPIO_SPEED_MEDIUM << (%<SclkPin_val>*2));
			%<sclkgpio_name>->PUPDR &= ~(GPIO_PUPDR_PUPDR%<SclkPin_val>);
			%if SclkPin_val > 7
				%assign SclkPin_val = SclkPin_val - 8
				%<sclkgpio_name>->AFR[1] |= (%<alternate_function> << (%<SclkPin_val>*4));
			%else				
				%<sclkgpio_name>->AFR[0] |= (%<alternate_function> << (%<SclkPin_val>*4));
			%endif
			
			%% configure NSS GPIO PIN
			__%<nssgpio_name>_CLK_ENABLE();			
			%<nssgpio_name>->MODER |= (GPIO_MODE_AF_PP << (%<NssPin_val>*2));
			%<nssgpio_name>->OTYPER &= ~(GPIO_OTYPER_OT_%<NssPin_val>);
			%<nssgpio_name>->OSPEEDR |= (GPIO_SPEED_MEDIUM << (%<NssPin_val>*2));
			%<nssgpio_name>->PUPDR &= ~(GPIO_PUPDR_PUPDR%<NssPin_val>);
			%if NssPin_val > 7
				%assign NssPin_val = NssPin_val - 8
				%<nssgpio_name>->AFR[1] |= (%<alternate_function> << (%<NssPin_val>*4));
			%else				
				%<nssgpio_name>->AFR[0] |= (%<alternate_function> << (%<NssPin_val>*4));
			%endif					
						
			__%<spi_name>_CLK_ENABLE();
			__%<dma_name>_CLK_ENABLE();
			
			%if ISEQUAL(MbedTarget, "DISCO_F407VG") || ISEQUAL(MbedTarget, "DISCO_F429ZI_168MHz") || ISEQUAL(MbedTarget, "DISCO_F429ZI_180MHz") || ISEQUAL(MbedTarget, "NUCLEO_F446RE") || ISEQUAL(MbedTarget, "STAMP_F446RE") || ISEQUAL(MbedTarget, "NUCLEO_F401RE") || ISEQUAL(MbedTarget, "NUCLEO_F411RE")
			
				%% configure SPI Peripheral	
				%if SlaveFlag_val == 1
					%<spi_name>->CR1 |= SPI_CR1_SSI | %<baudrate_presc>;
					%<spi_name>->CR1 &= ~(SPI_CR1_MSTR | SPI_CR1_BIDIMODE | SPI_CR1_DFF | SPI_CR1_CPOL | SPI_CR1_CPHA | SPI_FIRSTBIT_LSB | SPI_CR1_CRCEN);
					%<spi_name>->CR2 |= SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN;
					%<spi_name>->CR2 &= ~(SPI_CR2_SSOE | SPI_CR2_FRF);
				%else
					%<spi_name>->CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI | %<baudrate_presc>;
					%<spi_name>->CR1 &= ~(SPI_CR1_BIDIMODE | SPI_CR1_DFF | SPI_CR1_CPOL | SPI_CR1_CPHA | SPI_FIRSTBIT_LSB | SPI_CR1_CRCEN);
					%<spi_name>->CR2 |= SPI_CR2_SSOE | SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN;
					%<spi_name>->CR2 &= ~(SPI_CR2_FRF);
				%endif

				%<spi_name>->CR1 |= SPI_CR1_SPE;
				%% config DMA TX
				if(%<tx_dma_stream>->CR & DMA_SxCR_EN)
				{
					%<tx_dma_stream>->CR &= ~(DMA_SxCR_EN);
					while(%<tx_dma_stream>->CR & DMA_SxCR_EN);
				}
				%<tx_dma_stream>->CR = %<dma_channel> | DMA_MDATAALIGN_BYTE | DMA_PDATAALIGN_BYTE | DMA_MINC_ENABLE | DMA_PINC_DISABLE | DMA_MEMORY_TO_PERIPH;
				%<tx_dma_stream>->PAR = (uint32_t)&%<spi_name>->DR;
				
				%% config DMA RX			
				if(%<rx_dma_stream>->CR & DMA_SxCR_EN)
				{
					%<rx_dma_stream>->CR &= ~(DMA_SxCR_EN);
					while(%<rx_dma_stream>->CR & DMA_SxCR_EN);
				}
				%<rx_dma_stream>->CR = %<dma_channel> | DMA_MDATAALIGN_BYTE | DMA_PDATAALIGN_BYTE | DMA_MINC_ENABLE | DMA_PINC_DISABLE | DMA_PERIPH_TO_MEMORY | DMA_CIRCULAR;
				%<rx_dma_stream>->PAR = (uint32_t)&%<spi_name>->DR;			
			
			%elseif ISEQUAL(MbedTarget, "NUCLEO_F303RE")
			
				%% configure SPI Peripheral	
				%if SlaveFlag_val == 1
					%<spi_name>->CR1 |= SPI_CR1_SSI | %<baudrate_presc>;
					%<spi_name>->CR1 &= ~(SPI_CR1_MSTR | SPI_CR1_BIDIMODE | SPI_CR1_CPOL | SPI_CR1_CPHA | SPI_FIRSTBIT_LSB | SPI_CR1_CRCEN);
					%<spi_name>->CR2 |= SPI_CR2_TXDMAEN | SPI_DATASIZE_8BIT | SPI_CR2_RXDMAEN;
					%<spi_name>->CR2 &= ~(SPI_CR2_SSOE | SPI_CR2_FRF);
				%else
					%<spi_name>->CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI | %<baudrate_presc>;
					%<spi_name>->CR1 &= ~(SPI_CR1_BIDIMODE | SPI_CR1_CPOL | SPI_CR1_CPHA | SPI_FIRSTBIT_LSB | SPI_CR1_CRCEN);
					%<spi_name>->CR2 |= SPI_CR2_SSOE | SPI_DATASIZE_8BIT | SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN;
					%<spi_name>->CR2 &= ~(SPI_CR2_FRF);
				%endif
				
				%<spi_name>->CR1 |= SPI_CR1_SPE;
				if(%<tx_dma_channel>->CCR & DMA_CCR_EN)
				{
					%<tx_dma_channel>->CCR &= ~(DMA_CCR_EN);
					while(%<tx_dma_channel>->CCR & DMA_CCR_EN);
				}
				%<tx_dma_channel>->CCR = DMA_MDATAALIGN_BYTE | DMA_PDATAALIGN_BYTE | DMA_MINC_ENABLE | DMA_PINC_DISABLE | DMA_MEMORY_TO_PERIPH;
				%<tx_dma_channel>->CPAR = (uint32_t)&%<spi_name>->DR;
				
				if(%<rx_dma_channel>->CCR & DMA_CCR_EN)
				{
					%<rx_dma_channel>->CCR &= ~(DMA_CCR_EN);
					while(%<rx_dma_channel>->CCR & DMA_CCR_EN);
				}
				%<rx_dma_channel>->CCR = DMA_MDATAALIGN_BYTE | DMA_PDATAALIGN_BYTE | DMA_MINC_ENABLE | DMA_PINC_DISABLE | DMA_PERIPH_TO_MEMORY | DMA_CIRCULAR;
				%<rx_dma_channel>->CPAR = (uint32_t)&%<spi_name>->DR;	
				
			%elseif ISEQUAL(MbedTarget, "DISCO_F746NG")
			
				%% configure SPI Peripheral	
				%if SlaveFlag_val == 1
					%<spi_name>->CR1 |= SPI_CR1_SSI | %<baudrate_presc>;
					%<spi_name>->CR1 &= ~(SPI_CR1_MSTR | SPI_CR1_BIDIMODE | SPI_CR1_CPOL | SPI_CR1_CPHA | SPI_FIRSTBIT_LSB | SPI_CR1_CRCEN);
					%<spi_name>->CR2 |= SPI_CR2_TXDMAEN | SPI_DATASIZE_8BIT | SPI_CR2_RXDMAEN;
					%<spi_name>->CR2 &= ~(SPI_CR2_SSOE | SPI_CR2_FRF);
				%else
					%<spi_name>->CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI | %<baudrate_presc>;
					%<spi_name>->CR1 &= ~(SPI_CR1_BIDIMODE | SPI_CR1_CPOL | SPI_CR1_CPHA | SPI_FIRSTBIT_LSB | SPI_CR1_CRCEN);
					%<spi_name>->CR2 |= SPI_CR2_SSOE | SPI_DATASIZE_8BIT | SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN;
					%<spi_name>->CR2 &= ~(SPI_CR2_FRF);
				%endif
				
				%<spi_name>->CR1 |= SPI_CR1_SPE;
				%% config DMA TX
				if(%<tx_dma_stream>->CR & DMA_SxCR_EN)
				{
					%<tx_dma_stream>->CR &= ~(DMA_SxCR_EN);
					while(%<tx_dma_stream>->CR & DMA_SxCR_EN);
				}
				%<tx_dma_stream>->CR = %<dma_channel> | DMA_MDATAALIGN_BYTE | DMA_PDATAALIGN_BYTE | DMA_MINC_ENABLE | DMA_PINC_DISABLE | DMA_MEMORY_TO_PERIPH;
				%<tx_dma_stream>->PAR = (uint32_t)&%<spi_name>->DR;
				
				%% config DMA RX			
				if(%<rx_dma_stream>->CR & DMA_SxCR_EN)
				{
					%<rx_dma_stream>->CR &= ~(DMA_SxCR_EN);
					while(%<rx_dma_stream>->CR & DMA_SxCR_EN);
				}
				%<rx_dma_stream>->CR = %<dma_channel> | DMA_MDATAALIGN_BYTE | DMA_PDATAALIGN_BYTE | DMA_MINC_ENABLE | DMA_PINC_DISABLE | DMA_PERIPH_TO_MEMORY | DMA_CIRCULAR;
				%<rx_dma_stream>->PAR = (uint32_t)&%<spi_name>->DR;	
			
			%endif
		%closefile buffer		
		%<LibMdlRegCustomCode(buffer, "execution")>
	%endif
  
%endfunction
