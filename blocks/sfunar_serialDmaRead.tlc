%% File : sfunar_encoderInput.tlc
%%
%% Copyright 2010 The MathWorks, Inc.
%% Copyright 2015 Dr.O.Hagendorf, HS Wismar
%% Copyright 2015 M. Marquardt, HS Wismar

%implements sfunar_serialDmaRead "C"

%include "block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included
  %<MbedCommonBlockTypeSetup(block, system)>
    
%endfunction

%% Function: Start ========================================================
%function Start(block, system) Output
  
	%assign SerialPort_val = CAST("Number",LibBlockParameterValue(p1, 0))
	%assign RxBuffer_val = CAST("Number", LibBlockParameterValue(p2,0))

	
	%if ISEQUAL(MbedTarget,"DISCO_F407VG") || ISEQUAL(MbedTarget,"DISCO_F429ZI")
		%switch SerialPort_val
			%case 1
				%assign rx_dma_stream = "DMA2_Stream5"
				%break
			%case 2
				%assign rx_dma_stream = "DMA1_Stream5"
				%break		
			%case 3
				%assign rx_dma_stream = "DMA1_Stream1"
				%break
			%case 4
				%assign rx_dma_stream = "DMA1_Stream2"
				%break
			%case 5
				%assign rx_dma_stream = "DMA1_Stream0"
				%break
			%case 6
				%assign rx_dma_stream = "DMA2_Stream2"
				%break
		%endswitch
				
		%if !SLibCodeGenForSim()
			%openfile buffer
				%<rx_dma_stream>->M0AR = (uint32_T)serial%<SerialPort_val>_RxBuffer;
				%<rx_dma_stream>->NDTR = %<RxBuffer_val>;
				%<rx_dma_stream>->CR |= DMA_SxCR_EN;
			%closefile buffer
			%<LibMdlRegCustomCode(buffer, "trailer")>		
		%endif
			
	%elseif ISEQUAL(MbedTarget, "NUCLEO_F303RE")

		%switch SerialPort_val
			%case 1
				%assign rx_dma_channel = "DMA1_Channel5"
				%break
			%case 2
				%assign rx_dma_channel = "DMA1_Channel6"
				%break		
			%case 3
				%assign rx_dma_channel = "DMA1_Channel3"
				%break
			%case 4
				%assign rx_dma_channel = "DMA2_Channel3"
				%break
			%default
				%<LibReportError("Uart%<SerialPort_val> Peripheral not supported!")>
				%break
		%endswitch
				
		%if !SLibCodeGenForSim()
			%openfile buffer
				%<rx_dma_channel>->CMAR = (uint32_T)serial%<SerialPort_val>_RxBuffer;
				%<rx_dma_channel>->CNDTR = %<RxBuffer_val>;
				%<rx_dma_channel>->CCR |= DMA_CCR_EN;
			%closefile buffer
			%<LibMdlRegCustomCode(buffer, "trailer")>
		
		%endif
	%else
	%<LibReportFatalError("Serial DMA Read Block not supported for this target")>
	%endif    
	
	%openfile declbuf
		uint8_T serial%<SerialPort_val>_RxBuffer[%<RxBuffer_val>];
	%closefile declbuf
	%assign srcFile = LibGetModelDotCFile()
	%<LibSetSourceFileSection(srcFile, "Declarations", declbuf)> 
	
%endfunction


%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output

	%assign SerialPort_val = CAST("Number",LibBlockParameterValue(p1, 0))
	%assign RxBuffer_val = CAST("Number", LibBlockParameterValue(p2,0))
	%assign PortWidth_val = CAST("Number", LibBlockParameterValue(p3,0))
	%assign y1_addr = LibBlockOutputSignalAddr(0, "", "", 0)
	%assign y2_val = LibBlockOutputSignal(1, "", "", 0)

    %assign name = FEVAL("strrep",LibGetFormattedBlockPath(block),"/","_")
    %assign name = FEVAL("strrep",name," ","_")
    
	%if ISEQUAL(MbedTarget,"DISCO_F407VG")
		%switch SerialPort_val
			%case 1
				%assign rx_dma_stream = "DMA2_Stream5"
				%break
			%case 2
				%assign rx_dma_stream = "DMA1_Stream5"
				%break		
			%case 3
				%assign rx_dma_stream = "DMA1_Stream1"
				%break
			%case 4
				%assign rx_dma_stream = "DMA1_Stream2"
				%break
			%case 5
				%assign rx_dma_stream = "DMA1_Stream0"
				%break
			%case 6
				%assign rx_dma_stream = "DMA2_Stream2"
				%break
		%endswitch
	
		%assign dma_mar_access = "%<rx_dma_stream>->M0AR"
		%assign dma_ndtr_access = "%<rx_dma_stream>->NDTR"
		
	%elseif ISEQUAL(MbedTarget, "NUCLEO_F303RE")

		%switch SerialPort_val
			%case 1
				%assign rx_dma_channel = "DMA1_Channel5"
				%break
			%case 2
				%assign rx_dma_channel = "DMA1_Channel6"
				%break		
			%case 3
				%assign rx_dma_channel = "DMA1_Channel3"
				%break
			%case 4
				%assign rx_dma_channel = "DMA2_Channel3"
				%break
			%default
				%<LibReportError("Uart%<SerialPort_val> Peripheral not supported!")>
				%break
		%endswitch
		
		%assign dma_mar_access = "%<rx_dma_channel>->CMAR"
		%assign dma_ndtr_access = "%<rx_dma_channel>->CNDTR"
	%else
		%<LibReportFatalError("Serial DMA Read Block not supported for this target")>
	%endif
	
    %if !SLibCodeGenForSim()
		%openfile buffer
			static uint32_T %<name>_actual_pos = %<RxBuffer_val>;
			uint32_T %<name>_new_pos = %<dma_ndtr_access>;
			uint32_T %<name>_avail = 0;
			static uint32_T %<name>_buff_ptr = %<dma_mar_access>;
			uint8_T *%<name>_data_ptr;
		%closefile buffer
		%<LibSystemOutputCustomCode(system, buffer, "declaration")>
		
		if(%<name>_new_pos > %<name>_actual_pos){
			%<name>_avail = (%<RxBuffer_val> + %<name>_actual_pos) - %<name>_new_pos;
		}
		else{
			%<name>_avail = %<name>_actual_pos- %<name>_new_pos;
		}
		
		%%if(%<LibBlockOutputSignalWidth(0)> < %<name>_avail)
		if(%<PortWidth_val> < %<name>_avail){		
			%<name>_avail = %<PortWidth_val>;
		}

		%<y2_val> = %<name>_avail;
		%<name>_data_ptr = %<y1_addr>;
		
		for(uint32_T k = 0; k < %<name>_avail; k++)
		{
			if(%<name>_actual_pos == 0)
			{
				%<name>_actual_pos = %<RxBuffer_val>;
				%<name>_buff_ptr = %<dma_mar_access>;
			}
			%<name>_data_ptr[k] = *(uint8_T*)%<name>_buff_ptr++;
			
			%<name>_actual_pos--;
		}
		
    %endif
%endfunction
